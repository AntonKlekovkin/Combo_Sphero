%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 234 575 557
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: 13 Март 2018 г. 17:46:54 GMT+04:00
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
690 400 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
690.000 0 l
690.000 400.000 l
0 400.000 l
0 0 l
h
f
0 0 0 RG
1.50000 w
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 680 390 rc
1.00000 w
2 J
0 j
0 J
1 j
q
Q
2 J
0 j
0 J
1 j
q
Q
2 J
0 j
1.50000 w
0 J
1 j
q
q
1.00000 0 0 RG
37.0000 6.01709 635.989 346.982 rc
newpath
38.0000 240.166 m
40.4960 240.189 l
42.6677 240.248 l
45.1101 240.356 l
47.5687 240.511 l
50.0155 240.710 l
52.2841 240.935 l
54.6331 241.209 l
57.0624 241.536 l
59.4839 241.906 l
61.9747 242.333 l
64.1687 242.747 l
66.6385 243.257 l
69.1185 243.816 l
71.5084 244.398 l
73.6787 244.964 l
76.2594 245.684 l
78.4455 246.332 l
80.9886 247.132 l
83.2396 247.880 l
85.7093 248.746 l
88.0610 249.612 l
90.5149 250.561 l
92.7682 251.473 l
95.1988 252.498 l
97.7234 253.611 l
99.9212 254.619 l
102.294 255.748 l
104.747 256.959 l
107.146 258.188 l
109.467 259.418 l
112.044 260.832 l
114.360 262.145 l
116.832 263.591 l
119.073 264.921 l
121.522 266.358 l
123.827 267.691 l
126.236 269.067 l
128.591 270.395 l
131.057 271.765 l
133.432 273.067 l
135.861 274.380 l
138.269 275.663 l
140.483 276.825 l
143.019 278.138 l
145.288 279.295 l
147.707 280.511 l
150.022 281.657 l
152.593 282.909 l
154.819 283.976 l
157.346 285.168 l
159.649 286.237 l
162.167 287.387 l
164.341 288.362 l
166.816 289.455 l
169.207 290.491 l
171.596 291.509 l
173.977 292.505 l
176.264 293.445 l
178.736 294.442 l
181.093 295.374 l
183.573 296.336 l
185.817 297.189 l
188.298 298.114 l
190.675 298.981 l
193.045 299.828 l
195.522 300.693 l
197.802 301.473 l
200.138 302.255 l
202.717 303.097 l
205.052 303.841 l
207.439 304.585 l
209.868 305.322 l
212.100 305.983 l
214.480 306.670 l
216.841 307.334 l
219.367 308.024 l
221.596 308.616 l
224.168 309.280 l
226.488 309.860 l
228.785 310.418 l
231.254 310.999 l
233.733 311.562 l
235.989 312.058 l
238.385 312.546 l
240.723 312.972 l
243.257 313.377 l
245.450 313.680 l
247.968 313.973 l
250.336 314.195 l
252.680 314.364 l
255.027 314.483 l
257.420 314.552 l
259.957 314.568 l
262.283 314.530 l
264.579 314.444 l
267.034 314.298 l
269.483 314.098 l
271.681 313.871 l
274.285 313.544 l
276.464 313.223 l
279.013 312.792 l
281.445 312.325 l
283.617 311.862 l
286.059 311.290 l
288.518 310.658 l
290.965 309.974 l
293.233 309.291 l
295.582 308.533 l
298.012 307.697 l
300.433 306.808 l
302.924 305.839 l
305.118 304.937 l
307.588 303.869 l
310.068 302.741 l
312.458 301.599 l
314.628 300.518 l
317.209 299.211 l
319.395 298.130 l
321.938 296.901 l
324.189 295.840 l
326.658 294.704 l
329.010 293.650 l
331.464 292.580 l
333.717 291.623 l
336.148 290.619 l
338.673 289.606 l
340.870 288.750 l
343.244 287.852 l
345.696 286.954 l
348.095 286.103 l
350.416 285.307 l
352.993 284.454 l
355.309 283.715 l
357.782 282.955 l
360.022 282.293 l
362.472 281.597 l
364.776 280.969 l
367.186 280.340 l
369.541 279.753 l
372.007 279.167 l
374.382 278.631 l
376.810 278.112 l
379.219 277.625 l
381.432 277.203 l
383.969 276.749 l
386.237 276.370 l
388.656 275.993 l
390.972 275.659 l
393.543 275.320 l
395.769 275.052 l
398.295 274.777 l
400.598 274.554 l
403.117 274.339 l
405.290 274.180 l
407.766 274.026 l
410.157 273.905 l
412.546 273.813 l
414.927 273.749 l
417.214 273.714 l
419.686 273.705 l
422.042 273.724 l
424.522 273.774 l
426.767 273.844 l
429.248 273.951 l
431.624 274.082 l
433.995 274.240 l
436.471 274.411 l
438.752 274.564 l
441.087 274.716 l
443.666 274.878 l
446.001 275.020 l
448.389 275.159 l
450.817 275.296 l
453.050 275.417 l
455.429 275.542 l
457.790 275.660 l
460.316 275.781 l
462.545 275.883 l
465.117 275.995 l
467.438 276.092 l
469.734 276.182 l
472.204 276.274 l
474.683 276.361 l
476.939 276.436 l
479.334 276.510 l
481.672 276.577 l
484.206 276.644 l
486.399 276.698 l
488.918 276.754 l
491.285 276.802 l
493.630 276.845 l
495.976 276.882 l
498.370 276.916 l
500.907 276.945 l
503.233 276.967 l
505.529 276.985 l
507.983 276.998 l
510.433 277.005 l
512.742 277.008 l
S
cliprestore
newpath
0 0 m
0 390.000 l
680.000 390.000 l
680.000 0 l
h
W
Q
q
0 0 1.00000 RG
37.0000 6.01709 635.989 346.982 rc
newpath
38.0000 73.4996 m
40.4960 73.5512 l
42.6677 73.6800 l
45.1101 73.9181 l
47.5687 74.2575 l
50.0155 74.6946 l
52.2841 75.1883 l
54.6331 75.7894 l
57.0624 76.5071 l
59.4839 77.3197 l
61.9747 78.2569 l
64.1687 79.1673 l
66.6385 80.2877 l
69.1185 81.5142 l
71.5084 82.7925 l
73.6787 84.0352 l
76.2594 85.6145 l
78.4455 87.0385 l
80.9886 88.7945 l
83.2396 90.4382 l
85.7093 92.3381 l
88.0610 94.2411 l
90.5149 96.3243 l
92.7682 98.3251 l
95.1988 100.577 l
97.7234 103.020 l
99.9212 105.233 l
102.294 107.712 l
104.747 110.372 l
107.146 113.070 l
109.467 115.771 l
112.044 118.875 l
114.360 121.757 l
116.832 124.933 l
119.073 127.845 l
121.522 130.963 l
123.827 133.833 l
126.236 136.767 l
128.591 139.570 l
131.057 142.436 l
133.432 145.130 l
135.861 147.817 l
138.269 150.413 l
140.483 152.740 l
143.019 155.337 l
145.288 157.597 l
147.707 159.940 l
150.022 162.119 l
152.593 164.466 l
154.819 166.436 l
157.346 168.603 l
159.649 170.512 l
162.167 172.531 l
164.341 174.214 l
166.816 176.063 l
169.207 177.782 l
171.596 179.433 l
173.977 181.013 l
176.264 182.468 l
178.736 183.974 l
181.093 185.342 l
183.573 186.713 l
185.817 187.892 l
188.298 189.127 l
190.675 190.243 l
193.045 191.291 l
195.522 192.316 l
197.802 193.197 l
200.138 194.036 l
202.717 194.890 l
205.052 195.596 l
207.439 196.253 l
209.868 196.853 l
212.100 197.344 l
214.480 197.804 l
216.841 198.195 l
219.367 198.542 l
221.596 198.787 l
224.168 198.998 l
226.488 199.122 l
228.785 199.183 l
231.254 199.181 l
233.733 199.108 l
235.989 198.979 l
238.385 198.811 l
240.723 198.639 l
243.257 198.443 l
245.450 198.267 l
247.968 198.055 l
250.336 197.848 l
252.680 197.635 l
255.027 197.413 l
257.420 197.179 l
259.957 196.922 l
262.283 196.679 l
264.579 196.430 l
267.034 196.156 l
269.483 195.874 l
271.681 195.613 l
274.285 195.295 l
276.464 195.022 l
279.013 194.693 l
281.445 194.371 l
283.617 194.076 l
286.059 193.736 l
288.518 193.384 l
290.965 193.026 l
293.233 192.687 l
295.582 192.327 l
298.012 191.946 l
300.433 191.559 l
302.924 191.151 l
305.118 190.785 l
307.588 190.364 l
310.068 189.932 l
312.458 189.508 l
314.628 189.115 l
317.209 188.613 l
319.395 188.128 l
321.938 187.493 l
324.189 186.869 l
326.658 186.116 l
329.010 185.334 l
331.464 184.449 l
333.717 183.574 l
336.148 182.565 l
338.673 181.444 l
340.870 180.408 l
343.244 179.226 l
345.696 177.936 l
348.095 176.607 l
350.416 175.257 l
352.993 173.684 l
355.309 172.206 l
357.782 170.558 l
360.022 169.004 l
362.472 167.238 l
364.776 165.513 l
367.186 163.644 l
369.541 161.751 l
372.007 159.701 l
374.382 157.659 l
376.810 155.503 l
379.219 153.298 l
381.432 151.211 l
383.969 148.751 l
386.237 146.486 l
388.656 144.006 l
390.972 141.569 l
393.543 138.789 l
395.769 136.320 l
398.295 133.448 l
400.598 130.766 l
403.117 127.762 l
405.290 125.111 l
407.766 122.024 l
410.157 118.975 l
412.546 115.862 l
414.927 112.694 l
417.214 109.589 l
419.686 106.164 l
422.042 102.833 l
424.522 99.2583 l
426.767 95.9605 l
429.248 92.2477 l
431.624 88.6244 l
433.995 84.9469 l
436.471 81.1590 l
438.752 77.7772 l
441.087 74.4202 l
443.666 70.8388 l
446.001 67.7093 l
448.389 64.6202 l
450.817 61.5940 l
453.050 58.9150 l
455.429 56.1676 l
457.790 53.5515 l
460.316 50.8750 l
462.545 48.6176 l
465.117 46.1350 l
467.438 44.0066 l
469.734 42.0054 l
472.204 39.9695 l
474.683 38.0465 l
476.939 36.4022 l
479.334 34.7661 l
481.672 33.2785 l
484.206 31.7879 l
486.399 30.6003 l
488.918 29.3535 l
491.285 28.2955 l
493.630 27.3569 l
495.976 26.5261 l
498.370 25.7906 l
500.907 25.1345 l
503.233 24.6446 l
505.529 24.2657 l
507.983 23.9757 l
510.433 23.8049 l
512.742 23.7523 l
S
cliprestore
newpath
0 0 m
0 390.000 l
680.000 390.000 l
680.000 0 l
h
W
Q
Q
q
1.00000 w
2 J
0 j
q
0 J
1 j
newpath
38.0000 352.000 m
670.989 352.000 l
S
Q
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
348 375 13 15 rc
newpath
354.250 381.250 m
354.458 381.468 354.614 381.692 354.718 381.921  c
354.802 382.067 354.927 382.463 355.093 383.109  c
355.656 382.281 l
355.802 382.072 355.981 381.877 356.195 381.695  c
356.408 381.513 356.593 381.385 356.750 381.312  c
356.854 381.270 356.968 381.250 357.093 381.250  c
357.270 381.250 357.414 381.299 357.523 381.398  c
357.632 381.497 357.687 381.614 357.687 381.750  c
357.687 381.916 357.656 382.031 357.593 382.093  c
357.479 382.197 357.343 382.250 357.187 382.250  c
357.093 382.250 357.000 382.229 356.906 382.187  c
356.708 382.125 356.572 382.093 356.500 382.093  c
356.395 382.093 356.276 382.151 356.140 382.265  c
355.880 382.484 355.567 382.911 355.203 383.546  c
355.718 385.718 l
355.802 386.052 355.869 386.252 355.921 386.320  c
355.974 386.388 356.031 386.421 356.093 386.421  c
356.177 386.421 356.281 386.375 356.406 386.281  c
356.635 386.083 356.833 385.828 357.000 385.515  c
357.218 385.625 l
356.947 386.125 356.609 386.541 356.203 386.875  c
355.974 387.062 355.776 387.156 355.609 387.156  c
355.369 387.156 355.182 387.020 355.046 386.750  c
354.953 386.583 354.770 385.875 354.500 384.625  c
353.833 385.770 353.302 386.505 352.906 386.828  c
352.645 387.046 352.395 387.156 352.156 387.156  c
351.989 387.156 351.833 387.093 351.687 386.968  c
351.593 386.875 351.546 386.750 351.546 386.593  c
351.546 386.458 351.593 386.343 351.687 386.250  c
351.781 386.156 351.895 386.109 352.031 386.109  c
352.166 386.109 352.307 386.177 352.453 386.312  c
352.567 386.406 352.656 386.453 352.718 386.453  c
352.760 386.453 352.822 386.421 352.906 386.359  c
353.104 386.192 353.375 385.843 353.718 385.312  c
354.062 384.781 354.286 384.395 354.390 384.156  c
354.130 383.125 353.989 382.583 353.968 382.531  c
353.875 382.250 353.750 382.052 353.593 381.937  c
353.437 381.822 353.203 381.765 352.890 381.765  c
352.796 381.765 352.687 381.770 352.562 381.781  c
352.562 381.546 l
354.250 381.250 l
h
f
Q
cliprestore
newpath
0 0 m
0 390.000 l
680.000 390.000 l
680.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 w
newpath
38.0000 352.000 m
38.0000 357.450 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
40.4687 372.750 m
40.4687 371.770 40.6171 370.924 40.9140 370.210  c
41.2109 369.497 41.6041 368.968 42.0937 368.625  c
42.4791 368.354 42.8750 368.218 43.2812 368.218  c
43.9375 368.218 44.5260 368.552 45.0468 369.218  c
45.7031 370.052 46.0312 371.182 46.0312 372.609  c
46.0312 373.609 45.8880 374.458 45.6015 375.156  c
45.3151 375.854 44.9479 376.362 44.5000 376.679  c
44.0520 376.997 43.6250 377.156 43.2187 377.156  c
42.3958 377.156 41.7083 376.671 41.1562 375.703  c
40.6979 374.880 40.4687 373.895 40.4687 372.750  c
h
41.7187 372.906 m
41.7187 374.093 41.8645 375.062 42.1562 375.812  c
42.3958 376.437 42.7552 376.750 43.2343 376.750  c
43.4635 376.750 43.7005 376.648 43.9453 376.445  c
44.1901 376.242 44.3750 375.895 44.5000 375.406  c
44.6979 374.687 44.7968 373.661 44.7968 372.328  c
44.7968 371.349 44.6927 370.531 44.4843 369.875  c
44.3385 369.385 44.1406 369.041 43.8906 368.843  c
43.7239 368.708 43.5156 368.640 43.2656 368.640  c
42.9843 368.640 42.7291 368.765 42.5000 369.015  c
42.1979 369.369 41.9921 369.924 41.8828 370.679  c
41.7734 371.434 41.7187 372.177 41.7187 372.906  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
196.247 352.000 m
196.247 357.450 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
193.468 372.750 m
193.468 371.770 193.617 370.924 193.914 370.210  c
194.210 369.497 194.604 368.968 195.093 368.625  c
195.479 368.354 195.875 368.218 196.281 368.218  c
196.937 368.218 197.526 368.552 198.046 369.218  c
198.703 370.052 199.031 371.182 199.031 372.609  c
199.031 373.609 198.888 374.458 198.601 375.156  c
198.315 375.854 197.947 376.362 197.500 376.679  c
197.052 376.997 196.625 377.156 196.218 377.156  c
195.395 377.156 194.708 376.671 194.156 375.703  c
193.697 374.880 193.468 373.895 193.468 372.750  c
h
194.718 372.906 m
194.718 374.093 194.864 375.062 195.156 375.812  c
195.395 376.437 195.755 376.750 196.234 376.750  c
196.463 376.750 196.700 376.648 196.945 376.445  c
197.190 376.242 197.375 375.895 197.500 375.406  c
197.697 374.687 197.796 373.661 197.796 372.328  c
197.796 371.349 197.692 370.531 197.484 369.875  c
197.338 369.385 197.140 369.041 196.890 368.843  c
196.724 368.708 196.515 368.640 196.265 368.640  c
195.984 368.640 195.729 368.765 195.500 369.015  c
195.197 369.369 194.992 369.924 194.882 370.679  c
194.773 371.434 194.718 372.177 194.718 372.906  c
h
201.125 375.765 m
201.322 375.765 201.489 375.835 201.625 375.976  c
201.760 376.117 201.828 376.281 201.828 376.468  c
201.828 376.666 201.760 376.833 201.625 376.968  c
201.489 377.104 201.322 377.171 201.125 377.171  c
200.927 377.171 200.760 377.104 200.625 376.968  c
200.489 376.833 200.421 376.666 200.421 376.468  c
200.421 376.270 200.489 376.104 200.625 375.968  c
200.760 375.833 200.927 375.765 201.125 375.765  c
h
204.281 369.234 m
206.375 368.218 l
206.578 368.218 l
206.578 375.484 l
206.578 375.963 206.599 376.263 206.640 376.382  c
206.682 376.502 206.765 376.593 206.890 376.656  c
207.015 376.718 207.270 376.755 207.656 376.765  c
207.656 377.000 l
204.421 377.000 l
204.421 376.765 l
204.828 376.755 205.091 376.718 205.210 376.656  c
205.330 376.593 205.414 376.510 205.460 376.406  c
205.507 376.302 205.531 375.994 205.531 375.484  c
205.531 370.843 l
205.531 370.208 205.510 369.802 205.468 369.625  c
205.437 369.489 205.382 369.390 205.304 369.328  c
205.226 369.265 205.130 369.234 205.015 369.234  c
204.859 369.234 204.645 369.302 204.375 369.437  c
204.281 369.234 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
354.494 352.000 m
354.494 357.450 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
351.468 372.750 m
351.468 371.770 351.617 370.924 351.914 370.210  c
352.210 369.497 352.604 368.968 353.093 368.625  c
353.479 368.354 353.875 368.218 354.281 368.218  c
354.937 368.218 355.526 368.552 356.046 369.218  c
356.703 370.052 357.031 371.182 357.031 372.609  c
357.031 373.609 356.888 374.458 356.601 375.156  c
356.315 375.854 355.947 376.362 355.500 376.679  c
355.052 376.997 354.625 377.156 354.218 377.156  c
353.395 377.156 352.708 376.671 352.156 375.703  c
351.697 374.880 351.468 373.895 351.468 372.750  c
h
352.718 372.906 m
352.718 374.093 352.864 375.062 353.156 375.812  c
353.395 376.437 353.755 376.750 354.234 376.750  c
354.463 376.750 354.700 376.648 354.945 376.445  c
355.190 376.242 355.375 375.895 355.500 375.406  c
355.697 374.687 355.796 373.661 355.796 372.328  c
355.796 371.349 355.692 370.531 355.484 369.875  c
355.338 369.385 355.140 369.041 354.890 368.843  c
354.724 368.708 354.515 368.640 354.265 368.640  c
353.984 368.640 353.729 368.765 353.500 369.015  c
353.197 369.369 352.992 369.924 352.882 370.679  c
352.773 371.434 352.718 372.177 352.718 372.906  c
h
359.125 375.765 m
359.322 375.765 359.489 375.835 359.625 375.976  c
359.760 376.117 359.828 376.281 359.828 376.468  c
359.828 376.666 359.760 376.833 359.625 376.968  c
359.489 377.104 359.322 377.171 359.125 377.171  c
358.927 377.171 358.760 377.104 358.625 376.968  c
358.489 376.833 358.421 376.666 358.421 376.468  c
358.421 376.270 358.489 376.104 358.625 375.968  c
358.760 375.833 358.927 375.765 359.125 375.765  c
h
366.703 375.343 m
366.109 377.000 l
361.031 377.000 l
361.031 376.765 l
362.520 375.401 363.570 374.286 364.179 373.421  c
364.789 372.557 365.093 371.770 365.093 371.062  c
365.093 370.510 364.927 370.059 364.593 369.710  c
364.260 369.362 363.859 369.187 363.390 369.187  c
362.974 369.187 362.596 369.309 362.257 369.554  c
361.919 369.799 361.671 370.161 361.515 370.640  c
361.281 370.640 l
361.385 369.859 361.656 369.260 362.093 368.843  c
362.531 368.427 363.078 368.218 363.734 368.218  c
364.432 368.218 365.015 368.442 365.484 368.890  c
365.953 369.338 366.187 369.864 366.187 370.468  c
366.187 370.906 366.083 371.343 365.875 371.781  c
365.562 372.468 365.057 373.192 364.359 373.953  c
363.307 375.109 362.645 375.807 362.375 376.046  c
364.625 376.046 l
365.083 376.046 365.403 376.028 365.585 375.992  c
365.768 375.955 365.934 375.885 366.085 375.781  c
366.237 375.677 366.364 375.531 366.468 375.343  c
366.703 375.343 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
512.742 352.000 m
512.742 357.450 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
509.468 372.750 m
509.468 371.770 509.617 370.924 509.914 370.210  c
510.210 369.497 510.604 368.968 511.093 368.625  c
511.479 368.354 511.875 368.218 512.281 368.218  c
512.937 368.218 513.526 368.552 514.046 369.218  c
514.703 370.052 515.031 371.182 515.031 372.609  c
515.031 373.609 514.888 374.458 514.601 375.156  c
514.315 375.854 513.947 376.362 513.500 376.679  c
513.052 376.997 512.625 377.156 512.218 377.156  c
511.395 377.156 510.708 376.671 510.156 375.703  c
509.697 374.880 509.468 373.895 509.468 372.750  c
h
510.718 372.906 m
510.718 374.093 510.864 375.062 511.156 375.812  c
511.395 376.437 511.755 376.750 512.234 376.750  c
512.463 376.750 512.700 376.648 512.945 376.445  c
513.190 376.242 513.375 375.895 513.500 375.406  c
513.697 374.687 513.796 373.661 513.796 372.328  c
513.796 371.349 513.692 370.531 513.484 369.875  c
513.338 369.385 513.140 369.041 512.890 368.843  c
512.724 368.708 512.515 368.640 512.265 368.640  c
511.984 368.640 511.729 368.765 511.500 369.015  c
511.197 369.369 510.992 369.924 510.882 370.679  c
510.773 371.434 510.718 372.177 510.718 372.906  c
h
517.125 375.765 m
517.322 375.765 517.489 375.835 517.625 375.976  c
517.760 376.117 517.828 376.281 517.828 376.468  c
517.828 376.666 517.760 376.833 517.625 376.968  c
517.489 377.104 517.322 377.171 517.125 377.171  c
516.927 377.171 516.760 377.104 516.625 376.968  c
516.489 376.833 516.421 376.666 516.421 376.468  c
516.421 376.270 516.489 376.104 516.625 375.968  c
516.760 375.833 516.927 375.765 517.125 375.765  c
h
519.406 370.031 m
519.656 369.447 519.968 369.000 520.343 368.687  c
520.718 368.375 521.182 368.218 521.734 368.218  c
522.432 368.218 522.963 368.442 523.328 368.890  c
523.609 369.224 523.750 369.578 523.750 369.953  c
523.750 370.588 523.354 371.239 522.562 371.906  c
523.093 372.114 523.494 372.411 523.765 372.796  c
524.036 373.182 524.171 373.635 524.171 374.156  c
524.171 374.895 523.932 375.536 523.453 376.078  c
522.838 376.796 521.947 377.156 520.781 377.156  c
520.197 377.156 519.802 377.083 519.593 376.937  c
519.385 376.791 519.281 376.635 519.281 376.468  c
519.281 376.343 519.330 376.237 519.429 376.148  c
519.528 376.059 519.645 376.015 519.781 376.015  c
519.885 376.015 519.994 376.031 520.109 376.062  c
520.182 376.083 520.346 376.158 520.601 376.289  c
520.856 376.419 521.031 376.500 521.125 376.531  c
521.281 376.572 521.447 376.593 521.625 376.593  c
522.052 376.593 522.427 376.427 522.750 376.093  c
523.072 375.760 523.234 375.364 523.234 374.906  c
523.234 374.572 523.161 374.250 523.015 373.937  c
522.901 373.697 522.776 373.515 522.640 373.390  c
522.463 373.224 522.216 373.072 521.898 372.937  c
521.580 372.802 521.255 372.734 520.921 372.734  c
520.718 372.734 l
520.718 372.531 l
521.052 372.489 521.388 372.369 521.726 372.171  c
522.065 371.974 522.309 371.737 522.460 371.460  c
522.612 371.184 522.687 370.875 522.687 370.531  c
522.687 370.104 522.552 369.755 522.281 369.484  c
522.010 369.213 521.671 369.078 521.265 369.078  c
520.609 369.078 520.062 369.427 519.625 370.125  c
519.406 370.031 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
670.989 352.000 m
670.989 357.450 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
667.468 372.750 m
667.468 371.770 667.617 370.924 667.914 370.210  c
668.210 369.497 668.604 368.968 669.093 368.625  c
669.479 368.354 669.875 368.218 670.281 368.218  c
670.937 368.218 671.526 368.552 672.046 369.218  c
672.703 370.052 673.031 371.182 673.031 372.609  c
673.031 373.609 672.888 374.458 672.601 375.156  c
672.315 375.854 671.947 376.362 671.500 376.679  c
671.052 376.997 670.625 377.156 670.218 377.156  c
669.395 377.156 668.708 376.671 668.156 375.703  c
667.697 374.880 667.468 373.895 667.468 372.750  c
h
668.718 372.906 m
668.718 374.093 668.864 375.062 669.156 375.812  c
669.395 376.437 669.755 376.750 670.234 376.750  c
670.463 376.750 670.700 376.648 670.945 376.445  c
671.190 376.242 671.375 375.895 671.500 375.406  c
671.697 374.687 671.796 373.661 671.796 372.328  c
671.796 371.349 671.692 370.531 671.484 369.875  c
671.338 369.385 671.140 369.041 670.890 368.843  c
670.724 368.708 670.515 368.640 670.265 368.640  c
669.984 368.640 669.729 368.765 669.500 369.015  c
669.197 369.369 668.992 369.924 668.882 370.679  c
668.773 371.434 668.718 372.177 668.718 372.906  c
h
675.125 375.765 m
675.322 375.765 675.489 375.835 675.625 375.976  c
675.760 376.117 675.828 376.281 675.828 376.468  c
675.828 376.666 675.760 376.833 675.625 376.968  c
675.489 377.104 675.322 377.171 675.125 377.171  c
674.927 377.171 674.760 377.104 674.625 376.968  c
674.489 376.833 674.421 376.666 674.421 376.468  c
674.421 376.270 674.489 376.104 674.625 375.968  c
674.760 375.833 674.927 375.765 675.125 375.765  c
h
682.796 373.828 m
682.796 374.734 l
681.640 374.734 l
681.640 377.000 l
680.593 377.000 l
680.593 374.734 l
676.953 374.734 l
676.953 373.921 l
680.953 368.218 l
681.640 368.218 l
681.640 373.828 l
682.796 373.828 l
h
680.593 373.828 m
680.593 369.546 l
677.578 373.828 l
680.593 373.828 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
117.123 352.000 m
117.123 354.725 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
275.371 352.000 m
275.371 354.725 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
433.618 352.000 m
433.618 354.725 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
591.865 352.000 m
591.865 354.725 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
2 J
0 j
q
0 J
1 j
newpath
38.0000 352.000 m
38.0000 8.01709 l
S
Q
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
0 173 8 15 rc
Q
cliprestore
newpath
0 0 m
0 390.000 l
680.000 390.000 l
680.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 w
newpath
38.0000 352.000 m
32.5500 352.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
28.4687 357.750 m
28.4687 356.770 28.6171 355.924 28.9140 355.210  c
29.2109 354.497 29.6041 353.968 30.0937 353.625  c
30.4791 353.354 30.8750 353.218 31.2812 353.218  c
31.9375 353.218 32.5260 353.552 33.0468 354.218  c
33.7031 355.052 34.0312 356.182 34.0312 357.609  c
34.0312 358.609 33.8880 359.458 33.6015 360.156  c
33.3151 360.854 32.9479 361.362 32.5000 361.679  c
32.0520 361.997 31.6250 362.156 31.2187 362.156  c
30.3958 362.156 29.7083 361.671 29.1562 360.703  c
28.6979 359.880 28.4687 358.895 28.4687 357.750  c
h
29.7187 357.906 m
29.7187 359.093 29.8645 360.062 30.1562 360.812  c
30.3958 361.437 30.7552 361.750 31.2343 361.750  c
31.4635 361.750 31.7005 361.648 31.9453 361.445  c
32.1901 361.242 32.3750 360.895 32.5000 360.406  c
32.6979 359.687 32.7968 358.661 32.7968 357.328  c
32.7968 356.349 32.6927 355.531 32.4843 354.875  c
32.3385 354.385 32.1406 354.041 31.8906 353.843  c
31.7239 353.708 31.5156 353.640 31.2656 353.640  c
30.9843 353.640 30.7291 353.765 30.5000 354.015  c
30.1979 354.369 29.9921 354.924 29.8828 355.679  c
29.7734 356.434 29.7187 357.177 29.7187 357.906  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
38.0000 237.339 m
32.5500 237.339 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
18.4687 242.750 m
18.4687 241.770 18.6171 240.924 18.9140 240.210  c
19.2109 239.497 19.6041 238.968 20.0937 238.625  c
20.4791 238.354 20.8750 238.218 21.2812 238.218  c
21.9375 238.218 22.5260 238.552 23.0468 239.218  c
23.7031 240.052 24.0312 241.182 24.0312 242.609  c
24.0312 243.609 23.8880 244.458 23.6015 245.156  c
23.3151 245.854 22.9479 246.362 22.5000 246.679  c
22.0520 246.997 21.6250 247.156 21.2187 247.156  c
20.3958 247.156 19.7083 246.671 19.1562 245.703  c
18.6979 244.880 18.4687 243.895 18.4687 242.750  c
h
19.7187 242.906 m
19.7187 244.093 19.8645 245.062 20.1562 245.812  c
20.3958 246.437 20.7552 246.750 21.2343 246.750  c
21.4635 246.750 21.7005 246.648 21.9453 246.445  c
22.1901 246.242 22.3750 245.895 22.5000 245.406  c
22.6979 244.687 22.7968 243.661 22.7968 242.328  c
22.7968 241.349 22.6927 240.531 22.4843 239.875  c
22.3385 239.385 22.1406 239.041 21.8906 238.843  c
21.7239 238.708 21.5156 238.640 21.2656 238.640  c
20.9843 238.640 20.7291 238.765 20.5000 239.015  c
20.1979 239.369 19.9921 239.924 19.8828 240.679  c
19.7734 241.434 19.7187 242.177 19.7187 242.906  c
h
26.1250 245.765 m
26.3229 245.765 26.4895 245.835 26.6250 245.976  c
26.7604 246.117 26.8281 246.281 26.8281 246.468  c
26.8281 246.666 26.7604 246.833 26.6250 246.968  c
26.4895 247.104 26.3229 247.171 26.1250 247.171  c
25.9270 247.171 25.7604 247.104 25.6250 246.968  c
25.4895 246.833 25.4218 246.666 25.4218 246.468  c
25.4218 246.270 25.4895 246.104 25.6250 245.968  c
25.7604 245.833 25.9270 245.765 26.1250 245.765  c
h
29.2812 239.234 m
31.3750 238.218 l
31.5781 238.218 l
31.5781 245.484 l
31.5781 245.963 31.5989 246.263 31.6406 246.382  c
31.6822 246.502 31.7656 246.593 31.8906 246.656  c
32.0156 246.718 32.2708 246.755 32.6562 246.765  c
32.6562 247.000 l
29.4218 247.000 l
29.4218 246.765 l
29.8281 246.755 30.0911 246.718 30.2109 246.656  c
30.3307 246.593 30.4140 246.510 30.4609 246.406  c
30.5078 246.302 30.5312 245.994 30.5312 245.484  c
30.5312 240.843 l
30.5312 240.208 30.5104 239.802 30.4687 239.625  c
30.4375 239.489 30.3828 239.390 30.3046 239.328  c
30.2265 239.265 30.1302 239.234 30.0156 239.234  c
29.8593 239.234 29.6458 239.302 29.3750 239.437  c
29.2812 239.234 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
38.0000 122.678 m
32.5500 122.678 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
18.4687 127.750 m
18.4687 126.770 18.6171 125.924 18.9140 125.210  c
19.2109 124.497 19.6041 123.968 20.0937 123.625  c
20.4791 123.354 20.8750 123.218 21.2812 123.218  c
21.9375 123.218 22.5260 123.552 23.0468 124.218  c
23.7031 125.052 24.0312 126.182 24.0312 127.609  c
24.0312 128.609 23.8880 129.458 23.6015 130.156  c
23.3151 130.854 22.9479 131.362 22.5000 131.679  c
22.0520 131.997 21.6250 132.156 21.2187 132.156  c
20.3958 132.156 19.7083 131.671 19.1562 130.703  c
18.6979 129.880 18.4687 128.895 18.4687 127.750  c
h
19.7187 127.906 m
19.7187 129.093 19.8645 130.062 20.1562 130.812  c
20.3958 131.437 20.7552 131.750 21.2343 131.750  c
21.4635 131.750 21.7005 131.648 21.9453 131.445  c
22.1901 131.242 22.3750 130.895 22.5000 130.406  c
22.6979 129.687 22.7968 128.661 22.7968 127.328  c
22.7968 126.349 22.6927 125.531 22.4843 124.875  c
22.3385 124.385 22.1406 124.041 21.8906 123.843  c
21.7239 123.708 21.5156 123.640 21.2656 123.640  c
20.9843 123.640 20.7291 123.765 20.5000 124.015  c
20.1979 124.369 19.9921 124.924 19.8828 125.679  c
19.7734 126.434 19.7187 127.177 19.7187 127.906  c
h
26.1250 130.765 m
26.3229 130.765 26.4895 130.835 26.6250 130.976  c
26.7604 131.117 26.8281 131.281 26.8281 131.468  c
26.8281 131.666 26.7604 131.833 26.6250 131.968  c
26.4895 132.104 26.3229 132.171 26.1250 132.171  c
25.9270 132.171 25.7604 132.104 25.6250 131.968  c
25.4895 131.833 25.4218 131.666 25.4218 131.468  c
25.4218 131.270 25.4895 131.104 25.6250 130.968  c
25.7604 130.833 25.9270 130.765 26.1250 130.765  c
h
33.7031 130.343 m
33.1093 132.000 l
28.0312 132.000 l
28.0312 131.765 l
29.5208 130.401 30.5703 129.286 31.1796 128.421  c
31.7890 127.557 32.0937 126.770 32.0937 126.062  c
32.0937 125.510 31.9270 125.059 31.5937 124.710  c
31.2604 124.362 30.8593 124.187 30.3906 124.187  c
29.9739 124.187 29.5963 124.309 29.2578 124.554  c
28.9192 124.799 28.6718 125.161 28.5156 125.640  c
28.2812 125.640 l
28.3854 124.859 28.6562 124.260 29.0937 123.843  c
29.5312 123.427 30.0781 123.218 30.7343 123.218  c
31.4322 123.218 32.0156 123.442 32.4843 123.890  c
32.9531 124.338 33.1875 124.864 33.1875 125.468  c
33.1875 125.906 33.0833 126.343 32.8750 126.781  c
32.5625 127.468 32.0572 128.192 31.3593 128.953  c
30.3072 130.109 29.6458 130.807 29.3750 131.046  c
31.6250 131.046 l
32.0833 131.046 32.4036 131.028 32.5859 130.992  c
32.7682 130.955 32.9349 130.885 33.0859 130.781  c
33.2369 130.677 33.3645 130.531 33.4687 130.343  c
33.7031 130.343 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
38.0000 8.01709 m
32.5500 8.01709 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
18.4687 13.7500 m
18.4687 12.7708 18.6171 11.9244 18.9140 11.2109  c
19.2109 10.4974 19.6041 9.96875 20.0937 9.62500  c
20.4791 9.35416 20.8750 9.21875 21.2812 9.21875  c
21.9375 9.21875 22.5260 9.55208 23.0468 10.2187  c
23.7031 11.0520 24.0312 12.1822 24.0312 13.6093  c
24.0312 14.6093 23.8880 15.4583 23.6015 16.1562  c
23.3151 16.8541 22.9479 17.3619 22.5000 17.6796  c
22.0520 17.9974 21.6250 18.1562 21.2187 18.1562  c
20.3958 18.1562 19.7083 17.6718 19.1562 16.7031  c
18.6979 15.8802 18.4687 14.8958 18.4687 13.7500  c
h
19.7187 13.9062 m
19.7187 15.0937 19.8645 16.0625 20.1562 16.8125  c
20.3958 17.4375 20.7552 17.7500 21.2343 17.7500  c
21.4635 17.7500 21.7005 17.6484 21.9453 17.4453  c
22.1901 17.2421 22.3750 16.8958 22.5000 16.4062  c
22.6979 15.6875 22.7968 14.6614 22.7968 13.3281  c
22.7968 12.3489 22.6927 11.5312 22.4843 10.8750  c
22.3385 10.3854 22.1406 10.0416 21.8906 9.84375  c
21.7239 9.70833 21.5156 9.64062 21.2656 9.64062  c
20.9843 9.64062 20.7291 9.76562 20.5000 10.0156  c
20.1979 10.3697 19.9921 10.9244 19.8828 11.6796  c
19.7734 12.4349 19.7187 13.1770 19.7187 13.9062  c
h
26.1250 16.7656 m
26.3229 16.7656 26.4895 16.8359 26.6250 16.9765  c
26.7604 17.1171 26.8281 17.2812 26.8281 17.4687  c
26.8281 17.6666 26.7604 17.8333 26.6250 17.9687  c
26.4895 18.1041 26.3229 18.1718 26.1250 18.1718  c
25.9270 18.1718 25.7604 18.1041 25.6250 17.9687  c
25.4895 17.8333 25.4218 17.6666 25.4218 17.4687  c
25.4218 17.2708 25.4895 17.1041 25.6250 16.9687  c
25.7604 16.8333 25.9270 16.7656 26.1250 16.7656  c
h
28.4062 11.0312 m
28.6562 10.4479 28.9687 10.0000 29.3437 9.68750  c
29.7187 9.37500 30.1822 9.21875 30.7343 9.21875  c
31.4322 9.21875 31.9635 9.44270 32.3281 9.89062  c
32.6093 10.2239 32.7500 10.5781 32.7500 10.9531  c
32.7500 11.5885 32.3541 12.2395 31.5625 12.9062  c
32.0937 13.1145 32.4947 13.4114 32.7656 13.7968  c
33.0364 14.1822 33.1718 14.6354 33.1718 15.1562  c
33.1718 15.8958 32.9322 16.5364 32.4531 17.0781  c
31.8385 17.7968 30.9479 18.1562 29.7812 18.1562  c
29.1979 18.1562 28.8020 18.0833 28.5937 17.9375  c
28.3854 17.7916 28.2812 17.6354 28.2812 17.4687  c
28.2812 17.3437 28.3307 17.2369 28.4296 17.1484  c
28.5286 17.0599 28.6458 17.0156 28.7812 17.0156  c
28.8854 17.0156 28.9947 17.0312 29.1093 17.0625  c
29.1822 17.0833 29.3463 17.1588 29.6015 17.2890  c
29.8567 17.4192 30.0312 17.5000 30.1250 17.5312  c
30.2812 17.5729 30.4479 17.5937 30.6250 17.5937  c
31.0520 17.5937 31.4270 17.4270 31.7500 17.0937  c
32.0729 16.7604 32.2343 16.3645 32.2343 15.9062  c
32.2343 15.5729 32.1614 15.2500 32.0156 14.9375  c
31.9010 14.6979 31.7760 14.5156 31.6406 14.3906  c
31.4635 14.2239 31.2161 14.0729 30.8984 13.9375  c
30.5807 13.8020 30.2552 13.7343 29.9218 13.7343  c
29.7187 13.7343 l
29.7187 13.5312 l
30.0520 13.4895 30.3880 13.3697 30.7265 13.1718  c
31.0651 12.9739 31.3099 12.7369 31.4609 12.4609  c
31.6119 12.1849 31.6875 11.8750 31.6875 11.5312  c
31.6875 11.1041 31.5520 10.7552 31.2812 10.4843  c
31.0104 10.2135 30.6718 10.0781 30.2656 10.0781  c
29.6093 10.0781 29.0625 10.4270 28.6250 11.1250  c
28.4062 11.0312 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
38.0000 294.669 m
35.2750 294.669 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
38.0000 180.008 m
35.2750 180.008 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
38.0000 65.3476 m
35.2750 65.3476 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
2 J
0 j
Q
Q
cliprestore
0 0 690 400 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
1.00000 w
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
