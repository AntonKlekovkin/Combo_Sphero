%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 201 575 590
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: 21 Март 2018 г. 15:39:11 GMT+04:00
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
644 451 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
644.000 0 l
644.000 451.000 l
0 451.000 l
0 0 l
h
f
0 0 0 RG
2.00000 w
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 634 441 rc
1.00000 w
2 J
0 j
2.00000 w
0 J
1 j
q
Q
1.00000 w
2 J
0 j
2.00000 w
0 J
1 j
q
Q
1.00000 w
2 J
0 j
2.00000 w
0 J
1 j
q
q
116.000 14.0447 502.473 323.955 rc
newpath
118.000 128.606 m
120.615 128.650 l
122.891 128.758 l
125.450 128.959 l
128.026 129.246 l
130.590 129.615 l
132.968 130.032 l
135.429 130.540 l
137.975 131.146 l
140.512 131.832 l
143.122 132.624 l
145.421 133.393 l
148.009 134.339 l
150.608 135.375 l
153.112 136.455 l
155.387 137.504 l
158.091 138.838 l
160.382 140.041 l
163.047 141.524 l
165.405 142.912 l
167.993 144.517 l
170.458 146.124 l
173.029 147.884 l
175.390 149.574 l
177.937 151.476 l
180.583 153.540 l
182.886 155.408 l
185.373 157.503 l
187.942 159.749 l
190.456 162.028 l
192.889 164.309 l
195.589 166.931 l
198.016 169.365 l
200.607 172.048 l
202.955 174.514 l
205.521 177.178 l
207.936 179.651 l
210.461 182.203 l
212.929 184.665 l
215.513 187.207 l
218.002 189.621 l
220.546 192.055 l
223.070 194.434 l
225.390 196.590 l
228.048 199.025 l
230.425 201.171 l
232.960 203.425 l
235.386 205.550 l
238.080 207.872 l
240.413 209.851 l
243.060 212.062 l
245.473 214.044 l
248.113 216.176 l
250.390 217.985 l
252.984 220.011 l
255.489 221.934 l
257.993 223.821 l
260.488 225.668 l
262.884 227.411 l
265.475 229.260 l
267.944 230.988 l
270.543 232.772 l
272.895 234.355 l
275.495 236.069 l
277.985 237.677 l
280.469 239.248 l
283.064 240.853 l
285.454 242.299 l
287.901 243.748 l
290.604 245.311 l
293.050 246.691 l
295.552 248.070 l
298.097 249.437 l
300.436 250.662 l
302.930 251.936 l
305.404 253.167 l
308.051 254.448 l
310.387 255.546 l
313.082 256.776 l
315.513 257.853 l
317.920 258.887 l
320.507 259.964 l
323.105 261.009 l
325.469 261.928 l
327.979 262.834 l
330.429 263.624 l
333.085 264.375 l
335.383 264.936 l
338.022 265.480 l
340.503 265.892 l
342.960 266.206 l
345.418 266.426 l
347.926 266.554 l
350.585 266.583 l
353.022 266.513 l
355.428 266.353 l
358.000 266.083 l
360.567 265.711 l
362.870 265.290 l
365.599 264.685 l
367.882 264.090 l
370.553 263.290 l
373.102 262.424 l
375.377 261.566 l
377.937 260.504 l
380.513 259.332 l
383.077 258.064 l
385.454 256.797 l
387.916 255.392 l
390.461 253.840 l
392.999 252.193 l
395.609 250.395 l
397.908 248.723 l
400.496 246.743 l
403.095 244.650 l
405.599 242.533 l
407.873 240.527 l
410.577 238.105 l
412.868 236.099 l
415.533 233.820 l
417.892 231.852 l
420.480 229.746 l
422.944 227.792 l
425.516 225.807 l
427.877 224.032 l
430.424 222.170 l
433.069 220.292 l
435.372 218.704 l
437.860 217.039 l
440.429 215.373 l
442.943 213.795 l
445.375 212.319 l
448.076 210.737 l
450.502 209.367 l
453.093 207.958 l
455.441 206.730 l
458.008 205.439 l
460.423 204.274 l
462.947 203.108 l
465.416 202.019 l
467.999 200.933 l
470.488 199.939 l
473.033 198.976 l
475.557 198.074 l
477.876 197.291 l
480.534 196.449 l
482.912 195.746 l
485.446 195.047 l
487.873 194.428 l
490.566 193.798 l
492.899 193.301 l
495.547 192.791 l
497.960 192.378 l
500.599 191.980 l
502.877 191.684 l
505.471 191.398 l
507.976 191.175 l
510.480 191.005 l
512.974 190.886 l
515.371 190.821 l
517.962 190.804 l
520.431 190.839 l
523.029 190.931 l
525.382 191.062 l
527.982 191.261 l
530.472 191.503 l
532.956 191.795 l
535.551 192.113 l
537.940 192.397 l
540.388 192.678 l
543.090 192.979 l
545.537 193.241 l
548.039 193.500 l
550.584 193.754 l
552.923 193.979 l
555.416 194.210 l
557.891 194.429 l
560.537 194.653 l
562.873 194.843 l
565.568 195.051 l
568.000 195.230 l
570.406 195.397 l
572.994 195.568 l
575.592 195.730 l
577.956 195.867 l
580.466 196.005 l
582.916 196.129 l
585.571 196.255 l
587.869 196.354 l
590.508 196.459 l
592.989 196.547 l
595.446 196.626 l
597.905 196.696 l
600.413 196.758 l
603.071 196.813 l
605.509 196.854 l
607.915 196.885 l
610.487 196.910 l
613.053 196.924 l
615.473 196.929 l
S
cliprestore
newpath
0 0 m
0 441.000 l
634.000 441.000 l
634.000 0 l
h
W
Q
q
1.00000 w
2 J
0 j
[ 1.00000 0 0 1.00000 611.973 193.429 ] concat
newpath
6.00000 3.00000 m
6.00000 4.65685 4.65685 6.00000 3.00000 6.00000  c
1.34314 6.00000 0 4.65685 0 3.00000  c
0 1.34314 1.34314 0 3.00000 0  c
4.65685 0 6.00000 1.34314 6.00000 3.00000  c
h
S
[ 1.00000 0 0 1.00000 -611.973 -193.429 ] concat
[ 1.00000 0 0 1.00000 446.149 206.344 ] concat
newpath
6.00000 3.00000 m
6.00000 4.65685 4.65685 6.00000 3.00000 6.00000  c
1.34314 6.00000 0 4.65685 0 3.00000  c
0 1.34314 1.34314 0 3.00000 0  c
4.65685 0 6.00000 1.34314 6.00000 3.00000  c
h
S
[ 1.00000 0 0 1.00000 -446.149 -206.344 ] concat
[ 1.00000 0 0 1.00000 363.236 260.899 ] concat
newpath
6.00000 3.00000 m
6.00000 4.65685 4.65685 6.00000 3.00000 6.00000  c
1.34314 6.00000 0 4.65685 0 3.00000  c
0 1.34314 1.34314 0 3.00000 0  c
4.65685 0 6.00000 1.34314 6.00000 3.00000  c
h
S
[ 1.00000 0 0 1.00000 -363.236 -260.899 ] concat
[ 1.00000 0 0 1.00000 114.500 125.106 ] concat
newpath
6.00000 3.00000 m
6.00000 4.65685 4.65685 6.00000 3.00000 6.00000  c
1.34314 6.00000 0 4.65685 0 3.00000  c
0 1.34314 1.34314 0 3.00000 0  c
4.65685 0 6.00000 1.34314 6.00000 3.00000  c
h
S
[ 1.00000 0 0 1.00000 -114.500 -125.106 ] concat
[ 1.00000 0 0 1.00000 280.324 237.817 ] concat
newpath
6.00000 3.00000 m
6.00000 4.65685 4.65685 6.00000 3.00000 6.00000  c
1.34314 6.00000 0 4.65685 0 3.00000  c
0 1.34314 1.34314 0 3.00000 0  c
4.65685 0 6.00000 1.34314 6.00000 3.00000  c
h
S
[ 1.00000 0 0 1.00000 -280.324 -237.817 ] concat
Q
Q
q
1.00000 w
2 J
0 j
q
2.00000 w
0 J
1 j
newpath
118.000 336.000 m
615.473 336.000 l
S
Q
2.00000 w
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
350 380 32 60 rc
newpath
367.109 411.421 m
367.109 411.796 367.044 412.260 366.914 412.812  c
366.783 413.364 366.539 413.898 366.179 414.414  c
365.820 414.929 365.343 415.372 364.750 415.742  c
364.156 416.112 363.401 416.296 362.484 416.296  c
362.224 416.296 361.971 416.278 361.726 416.242  c
361.481 416.205 361.260 416.140 361.062 416.046  c
360.791 415.921 360.559 415.750 360.367 415.531  c
360.174 415.312 360.078 415.083 360.078 414.843  c
360.078 414.510 360.203 414.203 360.453 413.921  c
360.703 413.640 361.072 413.500 361.562 413.500  c
361.729 413.500 361.929 413.528 362.164 413.585  c
362.398 413.643 362.635 413.700 362.875 413.757  c
363.114 413.815 363.343 413.869 363.562 413.921  c
363.781 413.974 363.953 414.000 364.078 414.000  c
364.661 414.000 365.112 413.770 365.429 413.312  c
365.747 412.854 365.906 412.364 365.906 411.843  c
365.906 411.395 365.737 410.994 365.398 410.640  c
365.059 410.286 364.536 410.109 363.828 410.109  c
363.515 410.109 363.119 410.143 362.640 410.210  c
362.161 410.278 361.567 410.312 360.859 410.312  c
360.338 410.312 359.838 410.218 359.359 410.031  c
358.880 409.843 358.445 409.614 358.054 409.343  c
357.664 409.072 357.328 408.783 357.046 408.476  c
356.765 408.169 356.572 407.890 356.468 407.640  c
356.333 407.380 356.213 407.078 356.109 406.734  c
356.005 406.390 355.921 406.041 355.859 405.687  c
355.796 405.333 355.752 404.992 355.726 404.664  c
355.700 404.335 355.687 404.062 355.687 403.843  c
355.687 403.281 355.705 402.765 355.742 402.296  c
355.778 401.828 355.838 401.385 355.921 400.968  c
356.005 400.552 356.106 400.143 356.226 399.742  c
356.346 399.341 356.479 398.921 356.625 398.484  c
356.812 397.953 357.000 397.481 357.187 397.070  c
357.375 396.658 357.580 396.270 357.804 395.906  c
358.028 395.541 358.268 395.171 358.523 394.796  c
358.778 394.421 359.072 394.010 359.406 393.562  c
359.197 393.489 358.940 393.401 358.632 393.296  c
358.325 393.192 358.067 393.093 357.859 393.000  c
357.546 392.854 357.302 392.645 357.125 392.375  c
356.947 392.104 356.859 391.781 356.859 391.406  c
356.859 391.072 356.937 390.757 357.093 390.460  c
357.250 390.164 357.468 389.893 357.750 389.648  c
358.031 389.403 358.359 389.210 358.734 389.070  c
359.109 388.929 359.510 388.849 359.937 388.828  c
359.984 389.343 l
359.453 389.562 359.075 389.825 358.851 390.132  c
358.627 390.440 358.515 390.755 358.515 391.078  c
358.515 391.505 358.648 391.872 358.914 392.179  c
359.179 392.487 359.583 392.697 360.125 392.812  c
360.500 392.458 360.838 392.135 361.140 391.843  c
361.442 391.552 361.737 391.294 362.023 391.070  c
362.309 390.846 362.599 390.640 362.890 390.453  c
363.182 390.265 363.505 390.088 363.859 389.921  c
364.140 389.776 364.364 389.679 364.531 389.632  c
364.697 389.585 364.875 389.562 365.062 389.562  c
365.322 389.562 365.565 389.632 365.789 389.773  c
366.013 389.914 366.125 390.151 366.125 390.484  c
366.125 390.859 365.919 391.260 365.507 391.687  c
365.096 392.114 364.609 392.468 364.046 392.750  c
363.849 392.864 363.656 392.963 363.468 393.046  c
363.281 393.130 363.075 393.205 362.851 393.273  c
362.627 393.341 362.380 393.401 362.109 393.453  c
361.838 393.505 361.505 393.552 361.109 393.593  c
360.661 393.989 360.184 394.526 359.679 395.203  c
359.174 395.880 358.726 396.612 358.335 397.398  c
357.945 398.184 357.630 399.031 357.390 399.937  c
357.151 400.843 357.031 401.828 357.031 402.890  c
357.031 403.463 357.052 403.932 357.093 404.296  c
357.135 404.661 357.244 405.015 357.421 405.359  c
357.734 406.005 358.161 406.502 358.703 406.851  c
359.244 407.200 359.786 407.375 360.328 407.375  c
360.546 407.375 360.849 407.364 361.234 407.343  c
361.619 407.322 362.000 407.312 362.375 407.312  c
363.208 407.312 363.929 407.419 364.539 407.632  c
365.148 407.846 365.656 408.161 366.062 408.578  c
366.458 408.963 366.731 409.414 366.882 409.929  c
367.033 410.445 367.109 410.942 367.109 411.421  c
h
f
newpath
372.171 423.796 m
371.713 423.880 371.322 424.049 371.000 424.304  c
370.677 424.559 370.414 424.882 370.210 425.273  c
370.007 425.664 369.859 426.112 369.765 426.617  c
369.671 427.122 369.625 427.671 369.625 428.265  c
369.625 428.828 369.682 429.401 369.796 429.984  c
369.911 430.567 370.093 431.109 370.343 431.609  c
370.458 431.838 370.593 432.059 370.750 432.273  c
370.906 432.487 371.067 432.682 371.234 432.859  c
371.401 433.036 371.572 433.182 371.750 433.296  c
371.927 433.411 372.104 433.479 372.281 433.500  c
372.171 423.796 l
h
375.843 429.296 m
375.843 428.682 375.781 428.062 375.656 427.437  c
375.531 426.812 375.359 426.281 375.140 425.843  c
374.901 425.385 374.643 425.002 374.367 424.695  c
374.091 424.388 373.682 424.088 373.140 423.796  c
373.203 433.468 l
373.807 433.395 374.263 433.203 374.570 432.890  c
374.877 432.578 375.140 432.197 375.359 431.750  c
375.526 431.416 375.648 431.036 375.726 430.609  c
375.804 430.182 375.843 429.744 375.843 429.296  c
h
377.781 428.625 m
377.781 429.656 377.612 430.549 377.273 431.304  c
376.934 432.059 376.546 432.656 376.109 433.093  c
375.724 433.479 375.294 433.752 374.820 433.914  c
374.346 434.075 373.807 434.197 373.203 434.281  c
373.218 438.921 l
372.343 438.656 l
372.296 434.312 l
371.776 434.187 371.237 434.023 370.679 433.820  c
370.122 433.617 369.635 433.312 369.218 432.906  c
368.708 432.385 368.309 431.763 368.023 431.039  c
367.737 430.315 367.593 429.572 367.593 428.812  c
367.593 428.416 367.638 428.005 367.726 427.578  c
367.815 427.151 367.934 426.737 368.085 426.335  c
368.237 425.934 368.419 425.557 368.632 425.203  c
368.846 424.849 369.088 424.541 369.359 424.281  c
370.130 423.500 371.067 423.067 372.171 422.984  c
372.125 419.234 l
373.109 419.562 l
373.140 423.046 l
373.796 423.161 374.356 423.315 374.820 423.507  c
375.283 423.700 375.718 424.000 376.125 424.406  c
376.697 424.979 377.117 425.625 377.382 426.343  c
377.648 427.062 377.781 427.822 377.781 428.625  c
h
f
Q
cliprestore
newpath
0 0 m
0 441.000 l
634.000 441.000 l
634.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
newpath
118.000 336.000 m
118.000 343.875 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
117.015 369.843 m
117.015 367.729 117.333 365.908 117.968 364.382  c
118.604 362.856 119.453 361.718 120.515 360.968  c
121.338 360.375 122.187 360.078 123.062 360.078  c
124.479 360.078 125.755 360.802 126.890 362.250  c
128.296 364.041 129.000 366.474 129.000 369.546  c
129.000 371.703 128.690 373.533 128.070 375.039  c
127.450 376.544 126.661 377.635 125.703 378.312  c
124.744 378.989 123.817 379.328 122.921 379.328  c
121.151 379.328 119.677 378.286 118.500 376.203  c
117.510 374.442 117.015 372.322 117.015 369.843  c
h
119.687 370.187 m
119.687 372.739 120.005 374.817 120.640 376.421  c
121.161 377.786 121.932 378.468 122.953 378.468  c
123.453 378.468 123.966 378.247 124.492 377.804  c
125.018 377.362 125.416 376.619 125.687 375.578  c
126.114 374.015 126.328 371.807 126.328 368.953  c
126.328 366.838 126.109 365.072 125.671 363.656  c
125.338 362.614 124.911 361.875 124.390 361.437  c
124.015 361.135 123.567 360.984 123.046 360.984  c
122.421 360.984 121.869 361.260 121.390 361.812  c
120.734 362.572 120.286 363.763 120.046 365.382  c
119.807 367.002 119.687 368.604 119.687 370.187  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
283.824 336.000 m
283.824 343.875 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
272.015 369.843 m
272.015 367.729 272.333 365.908 272.968 364.382  c
273.604 362.856 274.453 361.718 275.515 360.968  c
276.338 360.375 277.187 360.078 278.062 360.078  c
279.479 360.078 280.755 360.802 281.890 362.250  c
283.296 364.041 284.000 366.474 284.000 369.546  c
284.000 371.703 283.690 373.533 283.070 375.039  c
282.450 376.544 281.661 377.635 280.703 378.312  c
279.744 378.989 278.817 379.328 277.921 379.328  c
276.151 379.328 274.677 378.286 273.500 376.203  c
272.510 374.442 272.015 372.322 272.015 369.843  c
h
274.687 370.187 m
274.687 372.739 275.005 374.817 275.640 376.421  c
276.161 377.786 276.932 378.468 277.953 378.468  c
278.453 378.468 278.966 378.247 279.492 377.804  c
280.018 377.362 280.416 376.619 280.687 375.578  c
281.114 374.015 281.328 371.807 281.328 368.953  c
281.328 366.838 281.109 365.072 280.671 363.656  c
280.338 362.614 279.911 361.875 279.390 361.437  c
279.015 361.135 278.567 360.984 278.046 360.984  c
277.421 360.984 276.869 361.260 276.390 361.812  c
275.734 362.572 275.286 363.763 275.046 365.382  c
274.807 367.002 274.687 368.604 274.687 370.187  c
h
288.500 376.343 m
288.927 376.343 289.286 376.492 289.578 376.789  c
289.869 377.085 290.015 377.442 290.015 377.859  c
290.015 378.286 289.867 378.648 289.570 378.945  c
289.273 379.242 288.916 379.390 288.500 379.390  c
288.083 379.390 287.726 379.242 287.429 378.945  c
287.132 378.648 286.984 378.286 286.984 377.859  c
286.984 377.432 287.132 377.072 287.429 376.781  c
287.726 376.489 288.083 376.343 288.500 376.343  c
h
295.281 362.281 m
299.796 360.078 l
300.250 360.078 l
300.250 375.734 l
300.250 376.776 300.291 377.424 300.375 377.679  c
300.458 377.934 300.638 378.130 300.914 378.265  c
301.190 378.401 301.744 378.479 302.578 378.500  c
302.578 379.000 l
295.609 379.000 l
295.609 378.500 l
296.484 378.479 297.049 378.401 297.304 378.265  c
297.559 378.130 297.737 377.953 297.835 377.734  c
297.934 377.515 297.984 376.849 297.984 375.734  c
297.984 365.718 l
297.984 364.375 297.942 363.510 297.859 363.125  c
297.786 362.833 297.666 362.619 297.500 362.484  c
297.333 362.349 297.130 362.281 296.890 362.281  c
296.557 362.281 296.088 362.421 295.484 362.703  c
295.281 362.281 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
449.649 336.000 m
449.649 343.875 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
438.015 369.843 m
438.015 367.729 438.333 365.908 438.968 364.382  c
439.604 362.856 440.453 361.718 441.515 360.968  c
442.338 360.375 443.187 360.078 444.062 360.078  c
445.479 360.078 446.755 360.802 447.890 362.250  c
449.296 364.041 450.000 366.474 450.000 369.546  c
450.000 371.703 449.690 373.533 449.070 375.039  c
448.450 376.544 447.661 377.635 446.703 378.312  c
445.744 378.989 444.817 379.328 443.921 379.328  c
442.151 379.328 440.677 378.286 439.500 376.203  c
438.510 374.442 438.015 372.322 438.015 369.843  c
h
440.687 370.187 m
440.687 372.739 441.005 374.817 441.640 376.421  c
442.161 377.786 442.932 378.468 443.953 378.468  c
444.453 378.468 444.966 378.247 445.492 377.804  c
446.018 377.362 446.416 376.619 446.687 375.578  c
447.114 374.015 447.328 371.807 447.328 368.953  c
447.328 366.838 447.109 365.072 446.671 363.656  c
446.338 362.614 445.911 361.875 445.390 361.437  c
445.015 361.135 444.567 360.984 444.046 360.984  c
443.421 360.984 442.869 361.260 442.390 361.812  c
441.734 362.572 441.286 363.763 441.046 365.382  c
440.807 367.002 440.687 368.604 440.687 370.187  c
h
454.500 376.343 m
454.927 376.343 455.286 376.492 455.578 376.789  c
455.869 377.085 456.015 377.442 456.015 377.859  c
456.015 378.286 455.867 378.648 455.570 378.945  c
455.273 379.242 454.916 379.390 454.500 379.390  c
454.083 379.390 453.726 379.242 453.429 378.945  c
453.132 378.648 452.984 378.286 452.984 377.859  c
452.984 377.432 453.132 377.072 453.429 376.781  c
453.726 376.489 454.083 376.343 454.500 376.343  c
h
470.843 375.437 m
469.546 379.000 l
458.609 379.000 l
458.609 378.500 l
461.817 375.562 464.078 373.164 465.390 371.304  c
466.703 369.445 467.359 367.744 467.359 366.203  c
467.359 365.026 467.000 364.059 466.281 363.304  c
465.562 362.549 464.703 362.171 463.703 362.171  c
462.786 362.171 461.966 362.437 461.242 362.968  c
460.518 363.500 459.984 364.281 459.640 365.312  c
459.140 365.312 l
459.369 363.625 459.955 362.330 460.898 361.429  c
461.841 360.528 463.015 360.078 464.421 360.078  c
465.932 360.078 467.190 360.559 468.195 361.523  c
469.200 362.487 469.703 363.625 469.703 364.937  c
469.703 365.885 469.484 366.828 469.046 367.765  c
468.369 369.234 467.276 370.796 465.765 372.453  c
463.494 374.932 462.078 376.427 461.515 376.937  c
466.359 376.937 l
467.338 376.937 468.026 376.901 468.421 376.828  c
468.817 376.755 469.177 376.606 469.500 376.382  c
469.822 376.158 470.099 375.843 470.328 375.437  c
470.843 375.437 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
615.473 336.000 m
615.473 343.875 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
604.015 369.843 m
604.015 367.729 604.333 365.908 604.968 364.382  c
605.604 362.856 606.453 361.718 607.515 360.968  c
608.338 360.375 609.187 360.078 610.062 360.078  c
611.479 360.078 612.755 360.802 613.890 362.250  c
615.296 364.041 616.000 366.474 616.000 369.546  c
616.000 371.703 615.690 373.533 615.070 375.039  c
614.450 376.544 613.661 377.635 612.703 378.312  c
611.744 378.989 610.817 379.328 609.921 379.328  c
608.151 379.328 606.677 378.286 605.500 376.203  c
604.510 374.442 604.015 372.322 604.015 369.843  c
h
606.687 370.187 m
606.687 372.739 607.005 374.817 607.640 376.421  c
608.161 377.786 608.932 378.468 609.953 378.468  c
610.453 378.468 610.966 378.247 611.492 377.804  c
612.018 377.362 612.416 376.619 612.687 375.578  c
613.114 374.015 613.328 371.807 613.328 368.953  c
613.328 366.838 613.109 365.072 612.671 363.656  c
612.338 362.614 611.911 361.875 611.390 361.437  c
611.015 361.135 610.567 360.984 610.046 360.984  c
609.421 360.984 608.869 361.260 608.390 361.812  c
607.734 362.572 607.286 363.763 607.046 365.382  c
606.807 367.002 606.687 368.604 606.687 370.187  c
h
620.500 376.343 m
620.927 376.343 621.286 376.492 621.578 376.789  c
621.869 377.085 622.015 377.442 622.015 377.859  c
622.015 378.286 621.867 378.648 621.570 378.945  c
621.273 379.242 620.916 379.390 620.500 379.390  c
620.083 379.390 619.726 379.242 619.429 378.945  c
619.132 378.648 618.984 378.286 618.984 377.859  c
618.984 377.432 619.132 377.072 619.429 376.781  c
619.726 376.489 620.083 376.343 620.500 376.343  c
h
625.421 363.984 m
625.953 362.734 626.622 361.770 627.429 361.093  c
628.237 360.416 629.239 360.078 630.437 360.078  c
631.927 360.078 633.067 360.562 633.859 361.531  c
634.463 362.250 634.765 363.020 634.765 363.843  c
634.765 365.187 633.916 366.578 632.218 368.015  c
633.354 368.463 634.213 369.101 634.796 369.929  c
635.380 370.757 635.671 371.734 635.671 372.859  c
635.671 374.463 635.161 375.854 634.140 377.031  c
632.817 378.562 630.890 379.328 628.359 379.328  c
627.109 379.328 626.260 379.171 625.812 378.859  c
625.364 378.546 625.140 378.213 625.140 377.859  c
625.140 377.599 625.247 377.367 625.460 377.164  c
625.674 376.960 625.932 376.859 626.234 376.859  c
626.463 376.859 626.692 376.895 626.921 376.968  c
627.078 377.020 627.429 377.190 627.976 377.476  c
628.523 377.763 628.901 377.932 629.109 377.984  c
629.453 378.088 629.812 378.140 630.187 378.140  c
631.125 378.140 631.937 377.781 632.625 377.062  c
633.312 376.343 633.656 375.489 633.656 374.500  c
633.656 373.781 633.494 373.078 633.171 372.390  c
632.932 371.880 632.671 371.494 632.390 371.234  c
632.005 370.869 631.468 370.539 630.781 370.242  c
630.093 369.945 629.395 369.796 628.687 369.796  c
628.250 369.796 l
628.250 369.390 l
628.968 369.296 629.690 369.036 630.414 368.609  c
631.138 368.182 631.664 367.666 631.992 367.062  c
632.320 366.458 632.484 365.796 632.484 365.078  c
632.484 364.140 632.192 363.382 631.609 362.804  c
631.026 362.226 630.296 361.937 629.421 361.937  c
628.005 361.937 626.822 362.692 625.875 364.203  c
625.421 363.984 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
1.00000 w
2 J
0 j
q
2.00000 w
0 J
1 j
newpath
118.000 336.000 m
118.000 17.0447 l
S
Q
2.00000 w
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
0 137 48 79 rc
newpath
16.0468 161.421 m
16.0468 160.286 15.8125 159.239 15.3437 158.281  c
14.8750 157.322 14.0625 156.364 12.9062 155.406  c
12.0625 155.406 l
11.4895 155.406 10.9270 155.513 10.3750 155.726  c
9.82291 155.940 9.33854 156.255 8.92187 156.671  c
8.58854 157.005 8.30989 157.471 8.08593 158.070  c
7.86197 158.669 7.75000 159.333 7.75000 160.062  c
7.75000 161.062 7.92708 162.015 8.28125 162.921  c
8.63541 163.828 9.15104 164.619 9.82812 165.296  c
10.0885 165.557 10.4375 165.817 10.8750 166.078  c
11.3125 166.338 11.7760 166.468 12.2656 166.468  c
13.0989 166.468 13.7578 166.281 14.2421 165.906  c
14.7265 165.531 15.1093 165.067 15.3906 164.515  c
15.6197 164.067 15.7864 163.599 15.8906 163.109  c
15.9947 162.619 16.0468 162.057 16.0468 161.421  c
h
14.3906 155.406 m
14.3906 155.468 l
14.7447 155.572 15.1224 155.770 15.5234 156.062  c
15.9244 156.354 16.3125 156.682 16.6875 157.046  c
17.0625 157.411 17.4036 157.794 17.7109 158.195  c
18.0182 158.596 18.2552 158.963 18.4218 159.296  c
18.6093 159.671 18.7343 160.031 18.7968 160.375  c
18.8593 160.718 18.8906 161.067 18.8906 161.421  c
18.8906 161.963 18.8125 162.502 18.6562 163.039  c
18.5000 163.575 18.2734 164.080 17.9765 164.554  c
17.6796 165.028 17.3099 165.466 16.8671 165.867  c
16.4244 166.268 15.9322 166.609 15.3906 166.890  c
15.1302 167.015 14.8411 167.122 14.5234 167.210  c
14.2057 167.299 13.8854 167.369 13.5625 167.421  c
13.2395 167.474 12.9218 167.515 12.6093 167.546  c
12.2968 167.578 12.0312 167.593 11.8125 167.593  c
10.9687 167.593 10.1640 167.416 9.39843 167.062  c
8.63281 166.708 7.97916 166.260 7.43750 165.718  c
6.54166 164.822 5.88541 163.856 5.46875 162.820  c
5.05208 161.783 4.84375 160.739 4.84375 159.687  c
4.84375 158.885 5.01562 158.112 5.35937 157.367  c
5.70312 156.622 6.11979 156.005 6.60937 155.515  c
7.01562 155.109 7.48437 154.752 8.01562 154.445  c
8.54687 154.138 9.10677 153.877 9.69531 153.664  c
10.2838 153.450 10.8776 153.286 11.4765 153.171  c
12.0755 153.057 12.6354 153.000 13.1562 153.000  c
20.4687 153.000 l
20.4687 155.406 l
14.3906 155.406 l
h
f
newpath
28.9531 186.093 m
28.8697 185.510 28.7864 184.989 28.7031 184.531  c
28.6197 184.072 28.5234 183.677 28.4140 183.343  c
28.3046 183.010 28.1770 182.710 28.0312 182.445  c
27.8854 182.179 27.7031 181.937 27.4843 181.718  c
27.1718 181.406 26.8463 181.184 26.5078 181.054  c
26.1692 180.924 25.8281 180.859 25.4843 180.859  c
25.1093 180.859 24.7864 180.994 24.5156 181.265  c
24.2447 181.536 24.0312 181.838 23.8750 182.171  c
23.6354 182.640 23.4609 183.187 23.3515 183.812  c
23.2421 184.437 23.1875 185.067 23.1875 185.703  c
23.1875 186.390 23.2343 187.065 23.3281 187.726  c
23.4218 188.388 23.5729 188.916 23.7812 189.312  c
23.9895 189.729 24.2630 190.054 24.6015 190.289  c
24.9401 190.523 25.2812 190.640 25.6250 190.640  c
25.8645 190.640 26.1119 190.583 26.3671 190.468  c
26.6224 190.354 26.8593 190.187 27.0781 189.968  c
27.3177 189.729 27.5520 189.401 27.7812 188.984  c
28.0104 188.567 28.2031 188.145 28.3593 187.718  c
28.9531 186.093 l
28.9531 186.093 l
h
33.6406 189.265 m
33.6406 189.484 33.5989 189.713 33.5156 189.953  c
33.4322 190.192 33.3229 190.416 33.1875 190.625  c
33.0520 190.833 32.8880 191.002 32.6953 191.132  c
32.5026 191.263 32.2968 191.328 32.0781 191.328  c
31.8281 191.328 31.5963 191.229 31.3828 191.031  c
31.1692 190.833 30.9739 190.583 30.7968 190.281  c
30.6197 189.979 30.4583 189.648 30.3125 189.289  c
30.1666 188.929 30.0364 188.588 29.9218 188.265  c
29.7864 188.505 29.6380 188.786 29.4765 189.109  c
29.3151 189.432 29.0625 189.770 28.7187 190.125  c
28.3333 190.500 27.8255 190.804 27.1953 191.039  c
26.5651 191.273 25.9479 191.390 25.3437 191.390  c
24.7916 191.390 24.2474 191.281 23.7109 191.062  c
23.1744 190.843 22.7239 190.552 22.3593 190.187  c
21.3906 189.218 20.9062 187.812 20.9062 185.968  c
20.9062 184.968 21.0156 184.101 21.2343 183.367  c
21.4531 182.632 21.8385 181.989 22.3906 181.437  c
22.6614 181.166 22.9218 180.942 23.1718 180.765  c
23.4218 180.588 23.6770 180.442 23.9375 180.328  c
24.1979 180.213 24.4791 180.130 24.7812 180.078  c
25.0833 180.026 25.4166 180.000 25.7812 180.000  c
26.2291 180.000 26.6536 180.088 27.0546 180.265  c
27.4557 180.442 27.8203 180.705 28.1484 181.054  c
28.4765 181.403 28.7630 181.838 29.0078 182.359  c
29.2526 182.880 29.4270 183.494 29.5312 184.203  c
29.5625 184.203 l
30.9843 180.281 l
32.9062 180.281 l
30.3906 187.265 l
30.4322 187.536 30.5000 187.822 30.5937 188.125  c
30.6875 188.427 30.8072 188.700 30.9531 188.945  c
31.0989 189.190 31.2708 189.388 31.4687 189.539  c
31.6666 189.690 31.8906 189.765 32.1406 189.765  c
32.2447 189.765 32.3515 189.731 32.4609 189.664  c
32.5703 189.596 32.6614 189.526 32.7343 189.453  c
32.8489 189.338 32.9583 189.179 33.0625 188.976  c
33.1666 188.773 33.2395 188.442 33.2812 187.984  c
33.6875 187.984 l
33.6406 189.265 l
h
f
newpath
35.5781 197.859 m
39.1250 196.125 l
39.4843 196.125 l
39.4843 208.437 l
39.4843 209.250 39.5182 209.757 39.5859 209.960  c
39.6536 210.164 39.7942 210.317 40.0078 210.421  c
40.2213 210.526 40.6562 210.588 41.3125 210.609  c
41.3125 211.000 l
35.8437 211.000 l
35.8437 210.609 l
36.5312 210.588 36.9739 210.526 37.1718 210.421  c
37.3697 210.317 37.5078 210.179 37.5859 210.007  c
37.6640 209.835 37.7031 209.312 37.7031 208.437  c
37.7031 200.562 l
37.7031 199.510 37.6666 198.833 37.5937 198.531  c
37.5416 198.302 37.4505 198.132 37.3203 198.023  c
37.1901 197.914 37.0312 197.859 36.8437 197.859  c
36.5833 197.859 36.2135 197.968 35.7343 198.187  c
35.5781 197.859 l
h
f
Q
cliprestore
newpath
0 0 m
0 441.000 l
634.000 441.000 l
634.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
newpath
118.000 336.000 m
110.125 336.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
97.0156 342.843 m
97.0156 340.729 97.3333 338.908 97.9687 337.382  c
98.6041 335.856 99.4531 334.718 100.515 333.968  c
101.338 333.375 102.187 333.078 103.062 333.078  c
104.479 333.078 105.755 333.802 106.890 335.250  c
108.296 337.041 109.000 339.474 109.000 342.546  c
109.000 344.703 108.690 346.533 108.070 348.039  c
107.450 349.544 106.661 350.635 105.703 351.312  c
104.744 351.989 103.817 352.328 102.921 352.328  c
101.151 352.328 99.6770 351.286 98.5000 349.203  c
97.5104 347.442 97.0156 345.322 97.0156 342.843  c
h
99.6875 343.187 m
99.6875 345.739 100.005 347.817 100.640 349.421  c
101.161 350.786 101.932 351.468 102.953 351.468  c
103.453 351.468 103.966 351.247 104.492 350.804  c
105.018 350.362 105.416 349.619 105.687 348.578  c
106.114 347.015 106.328 344.807 106.328 341.953  c
106.328 339.838 106.109 338.072 105.671 336.656  c
105.338 335.614 104.911 334.875 104.390 334.437  c
104.015 334.135 103.567 333.984 103.046 333.984  c
102.421 333.984 101.869 334.260 101.390 334.812  c
100.734 335.572 100.286 336.763 100.046 338.382  c
99.8072 340.002 99.6875 341.604 99.6875 343.187  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
118.000 229.681 m
110.125 229.681 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
62.0156 235.843 m
62.0156 233.729 62.3333 231.908 62.9687 230.382  c
63.6041 228.856 64.4531 227.718 65.5156 226.968  c
66.3385 226.375 67.1875 226.078 68.0625 226.078  c
69.4791 226.078 70.7552 226.802 71.8906 228.250  c
73.2968 230.041 74.0000 232.474 74.0000 235.546  c
74.0000 237.703 73.6901 239.533 73.0703 241.039  c
72.4505 242.544 71.6614 243.635 70.7031 244.312  c
69.7447 244.989 68.8177 245.328 67.9218 245.328  c
66.1510 245.328 64.6770 244.286 63.5000 242.203  c
62.5104 240.442 62.0156 238.322 62.0156 235.843  c
h
64.6875 236.187 m
64.6875 238.739 65.0052 240.817 65.6406 242.421  c
66.1614 243.786 66.9322 244.468 67.9531 244.468  c
68.4531 244.468 68.9661 244.247 69.4921 243.804  c
70.0182 243.362 70.4166 242.619 70.6875 241.578  c
71.1145 240.015 71.3281 237.807 71.3281 234.953  c
71.3281 232.838 71.1093 231.072 70.6718 229.656  c
70.3385 228.614 69.9114 227.875 69.3906 227.437  c
69.0156 227.135 68.5677 226.984 68.0468 226.984  c
67.4218 226.984 66.8697 227.260 66.3906 227.812  c
65.7343 228.572 65.2864 229.763 65.0468 231.382  c
64.8072 233.002 64.6875 234.604 64.6875 236.187  c
h
78.5000 242.343 m
78.9270 242.343 79.2864 242.492 79.5781 242.789  c
79.8697 243.085 80.0156 243.442 80.0156 243.859  c
80.0156 244.286 79.8671 244.648 79.5703 244.945  c
79.2734 245.242 78.9166 245.390 78.5000 245.390  c
78.0833 245.390 77.7265 245.242 77.4296 244.945  c
77.1328 244.648 76.9843 244.286 76.9843 243.859  c
76.9843 243.432 77.1328 243.072 77.4296 242.781  c
77.7265 242.489 78.0833 242.343 78.5000 242.343  c
h
83.0156 235.843 m
83.0156 233.729 83.3333 231.908 83.9687 230.382  c
84.6041 228.856 85.4531 227.718 86.5156 226.968  c
87.3385 226.375 88.1875 226.078 89.0625 226.078  c
90.4791 226.078 91.7552 226.802 92.8906 228.250  c
94.2968 230.041 95.0000 232.474 95.0000 235.546  c
95.0000 237.703 94.6901 239.533 94.0703 241.039  c
93.4505 242.544 92.6614 243.635 91.7031 244.312  c
90.7447 244.989 89.8177 245.328 88.9218 245.328  c
87.1510 245.328 85.6770 244.286 84.5000 242.203  c
83.5104 240.442 83.0156 238.322 83.0156 235.843  c
h
85.6875 236.187 m
85.6875 238.739 86.0052 240.817 86.6406 242.421  c
87.1614 243.786 87.9322 244.468 88.9531 244.468  c
89.4531 244.468 89.9661 244.247 90.4921 243.804  c
91.0182 243.362 91.4166 242.619 91.6875 241.578  c
92.1145 240.015 92.3281 237.807 92.3281 234.953  c
92.3281 232.838 92.1093 231.072 91.6718 229.656  c
91.3385 228.614 90.9114 227.875 90.3906 227.437  c
90.0156 227.135 89.5677 226.984 89.0468 226.984  c
88.4218 226.984 87.8697 227.260 87.3906 227.812  c
86.7343 228.572 86.2864 229.763 86.0468 231.382  c
85.8072 233.002 85.6875 234.604 85.6875 236.187  c
h
108.156 226.453 m
107.093 228.781 l
101.515 228.781 l
100.296 231.265 l
102.713 231.630 104.625 232.531 106.031 233.968  c
107.250 235.208 107.859 236.666 107.859 238.343  c
107.859 239.312 107.661 240.213 107.265 241.046  c
106.869 241.880 106.369 242.588 105.765 243.171  c
105.161 243.755 104.489 244.224 103.750 244.578  c
102.708 245.078 101.635 245.328 100.531 245.328  c
99.4166 245.328 98.6067 245.138 98.1015 244.757  c
97.5963 244.377 97.3437 243.963 97.3437 243.515  c
97.3437 243.255 97.4479 243.026 97.6562 242.828  c
97.8645 242.630 98.1302 242.531 98.4531 242.531  c
98.6822 242.531 98.8880 242.567 99.0703 242.640  c
99.2526 242.713 99.5572 242.901 99.9843 243.203  c
100.661 243.682 101.354 243.921 102.062 243.921  c
103.125 243.921 104.059 243.518 104.867 242.710  c
105.674 241.903 106.078 240.921 106.078 239.765  c
106.078 238.640 105.718 237.593 105.000 236.625  c
104.281 235.656 103.286 234.906 102.015 234.375  c
101.026 233.968 99.6718 233.734 97.9531 233.671  c
101.515 226.453 l
108.156 226.453 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
118.000 123.363 m
110.125 123.363 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
62.0156 129.843 m
62.0156 127.729 62.3333 125.908 62.9687 124.382  c
63.6041 122.856 64.4531 121.718 65.5156 120.968  c
66.3385 120.375 67.1875 120.078 68.0625 120.078  c
69.4791 120.078 70.7552 120.802 71.8906 122.250  c
73.2968 124.041 74.0000 126.474 74.0000 129.546  c
74.0000 131.703 73.6901 133.533 73.0703 135.039  c
72.4505 136.544 71.6614 137.635 70.7031 138.312  c
69.7447 138.989 68.8177 139.328 67.9218 139.328  c
66.1510 139.328 64.6770 138.286 63.5000 136.203  c
62.5104 134.442 62.0156 132.322 62.0156 129.843  c
h
64.6875 130.187 m
64.6875 132.739 65.0052 134.817 65.6406 136.421  c
66.1614 137.786 66.9322 138.468 67.9531 138.468  c
68.4531 138.468 68.9661 138.247 69.4921 137.804  c
70.0182 137.362 70.4166 136.619 70.6875 135.578  c
71.1145 134.015 71.3281 131.807 71.3281 128.953  c
71.3281 126.838 71.1093 125.072 70.6718 123.656  c
70.3385 122.614 69.9114 121.875 69.3906 121.437  c
69.0156 121.135 68.5677 120.984 68.0468 120.984  c
67.4218 120.984 66.8697 121.260 66.3906 121.812  c
65.7343 122.572 65.2864 123.763 65.0468 125.382  c
64.8072 127.002 64.6875 128.604 64.6875 130.187  c
h
78.5000 136.343 m
78.9270 136.343 79.2864 136.492 79.5781 136.789  c
79.8697 137.085 80.0156 137.442 80.0156 137.859  c
80.0156 138.286 79.8671 138.648 79.5703 138.945  c
79.2734 139.242 78.9166 139.390 78.5000 139.390  c
78.0833 139.390 77.7265 139.242 77.4296 138.945  c
77.1328 138.648 76.9843 138.286 76.9843 137.859  c
76.9843 137.432 77.1328 137.072 77.4296 136.781  c
77.7265 136.489 78.0833 136.343 78.5000 136.343  c
h
85.2812 122.281 m
89.7968 120.078 l
90.2500 120.078 l
90.2500 135.734 l
90.2500 136.776 90.2916 137.424 90.3750 137.679  c
90.4583 137.934 90.6380 138.130 90.9140 138.265  c
91.1901 138.401 91.7447 138.479 92.5781 138.500  c
92.5781 139.000 l
85.6093 139.000 l
85.6093 138.500 l
86.4843 138.479 87.0494 138.401 87.3046 138.265  c
87.5599 138.130 87.7369 137.953 87.8359 137.734  c
87.9349 137.515 87.9843 136.849 87.9843 135.734  c
87.9843 125.718 l
87.9843 124.375 87.9427 123.510 87.8593 123.125  c
87.7864 122.833 87.6666 122.619 87.5000 122.484  c
87.3333 122.349 87.1302 122.281 86.8906 122.281  c
86.5572 122.281 86.0885 122.421 85.4843 122.703  c
85.2812 122.281 l
h
97.0156 129.843 m
97.0156 127.729 97.3333 125.908 97.9687 124.382  c
98.6041 122.856 99.4531 121.718 100.515 120.968  c
101.338 120.375 102.187 120.078 103.062 120.078  c
104.479 120.078 105.755 120.802 106.890 122.250  c
108.296 124.041 109.000 126.474 109.000 129.546  c
109.000 131.703 108.690 133.533 108.070 135.039  c
107.450 136.544 106.661 137.635 105.703 138.312  c
104.744 138.989 103.817 139.328 102.921 139.328  c
101.151 139.328 99.6770 138.286 98.5000 136.203  c
97.5104 134.442 97.0156 132.322 97.0156 129.843  c
h
99.6875 130.187 m
99.6875 132.739 100.005 134.817 100.640 136.421  c
101.161 137.786 101.932 138.468 102.953 138.468  c
103.453 138.468 103.966 138.247 104.492 137.804  c
105.018 137.362 105.416 136.619 105.687 135.578  c
106.114 134.015 106.328 131.807 106.328 128.953  c
106.328 126.838 106.109 125.072 105.671 123.656  c
105.338 122.614 104.911 121.875 104.390 121.437  c
104.015 121.135 103.567 120.984 103.046 120.984  c
102.421 120.984 101.869 121.260 101.390 121.812  c
100.734 122.572 100.286 123.763 100.046 125.382  c
99.8072 127.002 99.6875 128.604 99.6875 130.187  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
118.000 17.0447 m
110.125 17.0447 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
62.0156 23.8437 m
62.0156 21.7291 62.3333 19.9088 62.9687 18.3828  c
63.6041 16.8567 64.4531 15.7187 65.5156 14.9687  c
66.3385 14.3750 67.1875 14.0781 68.0625 14.0781  c
69.4791 14.0781 70.7552 14.8020 71.8906 16.2500  c
73.2968 18.0416 74.0000 20.4739 74.0000 23.5468  c
74.0000 25.7031 73.6901 27.5338 73.0703 29.0390  c
72.4505 30.5442 71.6614 31.6354 70.7031 32.3125  c
69.7447 32.9895 68.8177 33.3281 67.9218 33.3281  c
66.1510 33.3281 64.6770 32.2864 63.5000 30.2031  c
62.5104 28.4427 62.0156 26.3229 62.0156 23.8437  c
h
64.6875 24.1875 m
64.6875 26.7395 65.0052 28.8177 65.6406 30.4218  c
66.1614 31.7864 66.9322 32.4687 67.9531 32.4687  c
68.4531 32.4687 68.9661 32.2474 69.4921 31.8046  c
70.0182 31.3619 70.4166 30.6197 70.6875 29.5781  c
71.1145 28.0156 71.3281 25.8072 71.3281 22.9531  c
71.3281 20.8385 71.1093 19.0729 70.6718 17.6562  c
70.3385 16.6145 69.9114 15.8750 69.3906 15.4375  c
69.0156 15.1354 68.5677 14.9843 68.0468 14.9843  c
67.4218 14.9843 66.8697 15.2604 66.3906 15.8125  c
65.7343 16.5729 65.2864 17.7630 65.0468 19.3828  c
64.8072 21.0026 64.6875 22.6041 64.6875 24.1875  c
h
78.5000 30.3437 m
78.9270 30.3437 79.2864 30.4921 79.5781 30.7890  c
79.8697 31.0859 80.0156 31.4427 80.0156 31.8593  c
80.0156 32.2864 79.8671 32.6484 79.5703 32.9453  c
79.2734 33.2421 78.9166 33.3906 78.5000 33.3906  c
78.0833 33.3906 77.7265 33.2421 77.4296 32.9453  c
77.1328 32.6484 76.9843 32.2864 76.9843 31.8593  c
76.9843 31.4322 77.1328 31.0729 77.4296 30.7812  c
77.7265 30.4895 78.0833 30.3437 78.5000 30.3437  c
h
85.2812 16.2812 m
89.7968 14.0781 l
90.2500 14.0781 l
90.2500 29.7343 l
90.2500 30.7760 90.2916 31.4244 90.3750 31.6796  c
90.4583 31.9349 90.6380 32.1302 90.9140 32.2656  c
91.1901 32.4010 91.7447 32.4791 92.5781 32.5000  c
92.5781 33.0000 l
85.6093 33.0000 l
85.6093 32.5000 l
86.4843 32.4791 87.0494 32.4010 87.3046 32.2656  c
87.5599 32.1302 87.7369 31.9531 87.8359 31.7343  c
87.9349 31.5156 87.9843 30.8489 87.9843 29.7343  c
87.9843 19.7187 l
87.9843 18.3750 87.9427 17.5104 87.8593 17.1250  c
87.7864 16.8333 87.6666 16.6197 87.5000 16.4843  c
87.3333 16.3489 87.1302 16.2812 86.8906 16.2812  c
86.5572 16.2812 86.0885 16.4218 85.4843 16.7031  c
85.2812 16.2812 l
h
108.156 14.4531 m
107.093 16.7812 l
101.515 16.7812 l
100.296 19.2656 l
102.713 19.6302 104.625 20.5312 106.031 21.9687  c
107.250 23.2083 107.859 24.6666 107.859 26.3437  c
107.859 27.3125 107.661 28.2135 107.265 29.0468  c
106.869 29.8802 106.369 30.5885 105.765 31.1718  c
105.161 31.7552 104.489 32.2239 103.750 32.5781  c
102.708 33.0781 101.635 33.3281 100.531 33.3281  c
99.4166 33.3281 98.6067 33.1380 98.1015 32.7578  c
97.5963 32.3776 97.3437 31.9635 97.3437 31.5156  c
97.3437 31.2552 97.4479 31.0260 97.6562 30.8281  c
97.8645 30.6302 98.1302 30.5312 98.4531 30.5312  c
98.6822 30.5312 98.8880 30.5677 99.0703 30.6406  c
99.2526 30.7135 99.5572 30.9010 99.9843 31.2031  c
100.661 31.6822 101.354 31.9218 102.062 31.9218  c
103.125 31.9218 104.059 31.5182 104.867 30.7109  c
105.674 29.9036 106.078 28.9218 106.078 27.7656  c
106.078 26.6406 105.718 25.5937 105.000 24.6250  c
104.281 23.6562 103.286 22.9062 102.015 22.3750  c
101.026 21.9687 99.6718 21.7343 97.9531 21.6718  c
101.515 14.4531 l
108.156 14.4531 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
1.00000 w
2 J
0 j
Q
Q
cliprestore
0 0 644 451 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
1.00000 w
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
