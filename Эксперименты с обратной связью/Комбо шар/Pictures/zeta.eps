%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 260 575 531
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: 21 Март 2018 г. 15:34:40 GMT+04:00
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
824 400 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
824.000 0 l
824.000 400.000 l
0 400.000 l
0 0 l
h
f
0 0 0 RG
10.0000 w
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 814 390 rc
1.00000 w
2 J
0 j
2.00000 w
0 J
1 j
q
Q
1.00000 w
2 J
0 j
2.00000 w
0 J
1 j
q
Q
1.00000 w
2 J
0 j
10.0000 w
0 J
1 j
q
q
2.00000 w
115.000 3.00709 693.992 282.992 rc
newpath
289.248 139.767 m
312.632 149.936 l
323.119 154.504 l
330.892 157.895 l
338.490 161.215 l
343.738 163.513 l
348.862 165.759 l
354.255 168.128 l
359.231 170.317 l
361.900 171.493 l
364.511 172.645 l
367.038 173.761 l
369.843 175.001 l
372.364 176.116 l
377.494 178.390 l
380.160 179.570 l
382.668 180.674 l
385.291 181.819 l
387.854 182.923 l
390.538 184.061 l
393.123 185.133 l
395.767 186.203 l
398.389 187.232 l
400.798 188.146 l
403.559 189.152 l
406.028 190.011 l
408.661 190.880 l
411.181 191.662 l
413.980 192.470 l
416.403 193.113 l
419.153 193.776 l
421.659 194.315 l
424.401 194.827 l
426.767 195.200 l
429.461 195.545 l
432.064 195.792 l
434.664 195.950 l
437.256 196.016 l
439.745 195.989 l
442.436 195.855 l
445.001 195.623 l
447.700 195.265 l
450.144 194.835 l
452.844 194.240 l
455.431 193.546 l
458.011 192.731 l
460.706 191.744 l
463.189 190.707 l
465.731 189.522 l
468.538 188.073 l
471.079 186.642 l
473.679 185.066 l
476.322 183.352 l
478.752 181.684 l
481.341 179.813 l
483.912 177.867 l
486.661 175.695 l
489.087 173.704 l
491.887 171.327 l
494.413 169.116 l
496.912 166.871 l
499.600 164.399 l
502.299 161.864 l
504.754 159.517 l
507.362 156.986 l
509.906 154.485 l
512.665 151.745 l
515.052 149.355 l
517.793 146.595 l
520.370 143.991 l
525.476 138.826 l
528.081 136.201 l
530.843 133.433 l
533.375 130.916 l
535.874 128.454 l
538.545 125.855 l
541.211 123.301 l
543.604 121.047 l
546.439 118.431 l
548.810 116.292 l
551.584 113.850 l
554.232 111.578 l
556.596 109.598 l
559.254 107.422 l
561.930 105.288 l
564.594 103.216 l
567.063 101.341 l
569.620 99.4452 l
572.264 97.5315 l
574.900 95.6704 l
577.611 93.8029 l
579.999 92.1961 l
582.687 90.4287 l
585.387 88.6967 l
587.988 87.0668 l
590.350 85.6189 l
593.159 83.9355 l
595.539 82.5409 l
598.307 80.9535 l
600.757 79.5785 l
603.445 78.1010 l
606.005 76.7230 l
608.676 75.3139 l
611.129 74.0445 l
613.774 72.7004 l
616.522 71.3304 l
618.915 70.1582 l
621.498 68.9124 l
624.167 67.6459 l
626.778 66.4258 l
629.305 65.2617 l
632.110 63.9868 l
634.631 62.8557 l
637.322 61.6620 l
639.761 60.5927 l
642.427 59.4369 l
644.936 58.3618 l
647.558 57.2507 l
650.122 56.1767 l
652.806 55.0651 l
655.391 54.0068 l
658.034 52.9366 l
660.656 51.8873 l
663.065 50.9334 l
665.826 49.8519 l
668.296 48.8953 l
670.929 47.8862 l
673.449 46.9306 l
676.247 45.8810 l
678.670 44.9817 l
681.420 43.9717 l
683.927 43.0607 l
686.668 42.0745 l
689.034 41.2320 l
691.728 40.2819 l
694.331 39.3733 l
696.932 38.4741 l
699.523 37.5868 l
702.012 36.7423 l
704.703 35.8378 l
707.268 34.9837 l
709.967 34.0931 l
712.411 33.2939 l
715.111 32.4182 l
717.698 31.5867 l
720.278 30.7642 l
722.974 29.9121 l
725.456 29.1336 l
727.998 28.3423 l
730.805 27.4754 l
733.347 26.6966 l
735.946 25.9057 l
738.589 25.1071 l
741.019 24.3779 l
743.609 23.6055 l
746.179 22.8438 l
748.928 22.0341 l
751.355 21.3238 l
754.154 20.5090 l
756.680 19.7777 l
759.180 19.0578 l
761.867 18.2875 l
764.566 17.5177 l
767.021 16.8205 l
769.629 16.0831 l
772.174 15.3662 l
774.932 14.5920 l
777.319 13.9243 l
780.060 13.1598 l
782.637 12.4432 l
785.189 11.7353 l
787.743 11.0285 l
790.349 10.3089 l
793.110 9.54763 l
795.642 8.85058 l
805.992 6.00711 l
S
cliprestore
newpath
0 0 m
0 390.000 l
814.000 390.000 l
814.000 0 l
h
W
Q
q
1.00000 w
2 J
0 j
[ 1.00000 0 0 1.00000 801.492 1.50711 ] concat
newpath
8.00000 4.00000 m
8.00000 6.20913 6.20913 8.00000 4.00000 8.00000  c
1.79086 8.00000 0 6.20913 0 4.00000  c
0 1.79086 1.79086 0 4.00000 0  c
6.20913 0 8.00000 1.79086 8.00000 4.00000  c
h
S
[ 1.00000 0 0 1.00000 -801.492 -1.50711 ] concat
[ 1.00000 0 0 1.00000 629.244 58.7522 ] concat
newpath
8.00000 4.00000 m
8.00000 6.20913 6.20913 8.00000 4.00000 8.00000  c
1.79086 8.00000 0 6.20913 0 4.00000  c
0 1.79086 1.79086 0 4.00000 0  c
6.20913 0 8.00000 1.79086 8.00000 4.00000  c
h
S
[ 1.00000 0 0 1.00000 -629.244 -58.7522 ] concat
[ 1.00000 0 0 1.00000 543.120 112.860 ] concat
newpath
8.00000 4.00000 m
8.00000 6.20913 6.20913 8.00000 4.00000 8.00000  c
1.79086 8.00000 0 6.20913 0 4.00000  c
0 1.79086 1.79086 0 4.00000 0  c
6.20913 0 8.00000 1.79086 8.00000 4.00000  c
h
S
[ 1.00000 0 0 1.00000 -543.120 -112.860 ] concat
[ 1.00000 0 0 1.00000 370.872 172.949 ] concat
newpath
8.00000 4.00000 m
8.00000 6.20913 6.20913 8.00000 4.00000 8.00000  c
1.79086 8.00000 0 6.20913 0 4.00000  c
0 1.79086 1.79086 0 4.00000 0  c
6.20913 0 8.00000 1.79086 8.00000 4.00000  c
h
S
[ 1.00000 0 0 1.00000 -370.872 -172.949 ] concat
[ 1.00000 0 0 1.00000 284.748 135.267 ] concat
newpath
8.00000 4.00000 m
8.00000 6.20913 6.20913 8.00000 4.00000 8.00000  c
1.79086 8.00000 0 6.20913 0 4.00000  c
0 1.79086 1.79086 0 4.00000 0  c
6.20913 0 8.00000 1.79086 8.00000 4.00000  c
h
S
[ 1.00000 0 0 1.00000 -284.748 -135.267 ] concat
[ 1.00000 0 0 1.00000 456.996 186.927 ] concat
newpath
8.00000 4.00000 m
8.00000 6.20913 6.20913 8.00000 4.00000 8.00000  c
1.79086 8.00000 0 6.20913 0 4.00000  c
0 1.79086 1.79086 0 4.00000 0  c
6.20913 0 8.00000 1.79086 8.00000 4.00000  c
h
S
[ 1.00000 0 0 1.00000 -456.996 -186.927 ] concat
Q
Q
q
1.00000 w
2 J
0 j
q
2.00000 w
0 J
1 j
newpath
117.000 284.000 m
805.992 284.000 l
S
Q
2.00000 w
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
445 329 32 60 rc
newpath
462.109 360.421 m
462.109 360.796 462.044 361.260 461.914 361.812  c
461.783 362.364 461.539 362.898 461.179 363.414  c
460.820 363.929 460.343 364.372 459.750 364.742  c
459.156 365.112 458.401 365.296 457.484 365.296  c
457.224 365.296 456.971 365.278 456.726 365.242  c
456.481 365.205 456.260 365.140 456.062 365.046  c
455.791 364.921 455.559 364.750 455.367 364.531  c
455.174 364.312 455.078 364.083 455.078 363.843  c
455.078 363.510 455.203 363.203 455.453 362.921  c
455.703 362.640 456.072 362.500 456.562 362.500  c
456.729 362.500 456.929 362.528 457.164 362.585  c
457.398 362.643 457.635 362.700 457.875 362.757  c
458.114 362.815 458.343 362.869 458.562 362.921  c
458.781 362.974 458.953 363.000 459.078 363.000  c
459.661 363.000 460.112 362.770 460.429 362.312  c
460.747 361.854 460.906 361.364 460.906 360.843  c
460.906 360.395 460.737 359.994 460.398 359.640  c
460.059 359.286 459.536 359.109 458.828 359.109  c
458.515 359.109 458.119 359.143 457.640 359.210  c
457.161 359.278 456.567 359.312 455.859 359.312  c
455.338 359.312 454.838 359.218 454.359 359.031  c
453.880 358.843 453.445 358.614 453.054 358.343  c
452.664 358.072 452.328 357.783 452.046 357.476  c
451.765 357.169 451.572 356.890 451.468 356.640  c
451.333 356.380 451.213 356.078 451.109 355.734  c
451.005 355.390 450.921 355.041 450.859 354.687  c
450.796 354.333 450.752 353.992 450.726 353.664  c
450.700 353.335 450.687 353.062 450.687 352.843  c
450.687 352.281 450.705 351.765 450.742 351.296  c
450.778 350.828 450.838 350.385 450.921 349.968  c
451.005 349.552 451.106 349.143 451.226 348.742  c
451.346 348.341 451.479 347.921 451.625 347.484  c
451.812 346.953 452.000 346.481 452.187 346.070  c
452.375 345.658 452.580 345.270 452.804 344.906  c
453.028 344.541 453.268 344.171 453.523 343.796  c
453.778 343.421 454.072 343.010 454.406 342.562  c
454.197 342.489 453.940 342.401 453.632 342.296  c
453.325 342.192 453.067 342.093 452.859 342.000  c
452.546 341.854 452.302 341.645 452.125 341.375  c
451.947 341.104 451.859 340.781 451.859 340.406  c
451.859 340.072 451.937 339.757 452.093 339.460  c
452.250 339.164 452.468 338.893 452.750 338.648  c
453.031 338.403 453.359 338.210 453.734 338.070  c
454.109 337.929 454.510 337.849 454.937 337.828  c
454.984 338.343 l
454.453 338.562 454.075 338.825 453.851 339.132  c
453.627 339.440 453.515 339.755 453.515 340.078  c
453.515 340.505 453.648 340.872 453.914 341.179  c
454.179 341.487 454.583 341.697 455.125 341.812  c
455.500 341.458 455.838 341.135 456.140 340.843  c
456.442 340.552 456.737 340.294 457.023 340.070  c
457.309 339.846 457.599 339.640 457.890 339.453  c
458.182 339.265 458.505 339.088 458.859 338.921  c
459.140 338.776 459.364 338.679 459.531 338.632  c
459.697 338.585 459.875 338.562 460.062 338.562  c
460.322 338.562 460.565 338.632 460.789 338.773  c
461.013 338.914 461.125 339.151 461.125 339.484  c
461.125 339.859 460.919 340.260 460.507 340.687  c
460.096 341.114 459.609 341.468 459.046 341.750  c
458.849 341.864 458.656 341.963 458.468 342.046  c
458.281 342.130 458.075 342.205 457.851 342.273  c
457.627 342.341 457.380 342.401 457.109 342.453  c
456.838 342.505 456.505 342.552 456.109 342.593  c
455.661 342.989 455.184 343.526 454.679 344.203  c
454.174 344.880 453.726 345.612 453.335 346.398  c
452.945 347.184 452.630 348.031 452.390 348.937  c
452.151 349.843 452.031 350.828 452.031 351.890  c
452.031 352.463 452.052 352.932 452.093 353.296  c
452.135 353.661 452.244 354.015 452.421 354.359  c
452.734 355.005 453.161 355.502 453.703 355.851  c
454.244 356.200 454.786 356.375 455.328 356.375  c
455.546 356.375 455.849 356.364 456.234 356.343  c
456.619 356.322 457.000 356.312 457.375 356.312  c
458.208 356.312 458.929 356.419 459.539 356.632  c
460.148 356.846 460.656 357.161 461.062 357.578  c
461.458 357.963 461.731 358.414 461.882 358.929  c
462.033 359.445 462.109 359.942 462.109 360.421  c
h
f
newpath
465.171 376.046 m
465.296 378.343 l
465.328 378.885 465.421 379.408 465.578 379.914  c
465.734 380.419 465.924 380.864 466.148 381.250  c
466.372 381.635 466.632 381.945 466.929 382.179  c
467.226 382.414 467.526 382.531 467.828 382.531  c
468.140 382.531 468.442 382.403 468.734 382.148  c
469.026 381.893 469.281 381.567 469.500 381.171  c
469.718 380.776 469.901 380.328 470.046 379.828  c
470.192 379.328 470.281 378.838 470.312 378.359  c
470.453 376.046 l
465.171 376.046 l
h
470.343 372.812 m
470.322 372.625 470.291 372.406 470.250 372.156  c
470.208 371.906 470.153 371.656 470.085 371.406  c
470.018 371.156 469.947 370.914 469.875 370.679  c
469.802 370.445 469.724 370.250 469.640 370.093  c
469.411 369.645 469.122 369.278 468.773 368.992  c
468.424 368.705 468.093 368.562 467.781 368.562  c
467.552 368.562 467.257 368.695 466.898 368.960  c
466.539 369.226 466.255 369.557 466.046 369.953  c
465.942 370.161 465.846 370.390 465.757 370.640  c
465.669 370.890 465.593 371.143 465.531 371.398  c
465.468 371.653 465.414 371.906 465.367 372.156  c
465.320 372.406 465.291 372.619 465.281 372.796  c
465.140 374.906 l
470.468 374.906 l
470.343 372.812 l
h
472.671 375.281 m
472.671 376.479 472.585 377.523 472.414 378.414  c
472.242 379.304 472.020 380.026 471.750 380.578  c
471.572 380.942 471.349 381.294 471.078 381.632  c
470.807 381.971 470.500 382.268 470.156 382.523  c
469.812 382.778 469.445 382.984 469.054 383.140  c
468.664 383.296 468.255 383.375 467.828 383.375  c
467.067 383.375 466.330 383.132 465.617 382.648  c
464.903 382.164 464.328 381.484 463.890 380.609  c
463.588 379.984 463.356 379.237 463.195 378.367  c
463.033 377.497 462.953 376.468 462.953 375.281  c
462.953 374.281 463.020 373.445 463.156 372.773  c
463.291 372.101 463.500 371.484 463.781 370.921  c
464.000 370.463 464.260 370.049 464.562 369.679  c
464.864 369.309 465.190 368.984 465.539 368.703  c
465.888 368.421 466.257 368.203 466.648 368.046  c
467.039 367.890 467.432 367.812 467.828 367.812  c
468.140 367.812 468.476 367.875 468.835 368.000  c
469.195 368.125 469.554 368.317 469.914 368.578  c
470.273 368.838 470.619 369.169 470.953 369.570  c
471.286 369.971 471.593 370.442 471.875 370.984  c
472.156 371.546 472.359 372.182 472.484 372.890  c
472.609 373.599 472.671 374.395 472.671 375.281  c
h
f
Q
cliprestore
newpath
0 0 m
0 390.000 l
814.000 390.000 l
814.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
newpath
117.000 284.000 m
117.000 292.520 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
116.015 318.843 m
116.015 316.729 116.333 314.908 116.968 313.382  c
117.604 311.856 118.453 310.718 119.515 309.968  c
120.338 309.375 121.187 309.078 122.062 309.078  c
123.479 309.078 124.755 309.802 125.890 311.250  c
127.296 313.041 128.000 315.474 128.000 318.546  c
128.000 320.703 127.690 322.533 127.070 324.039  c
126.450 325.544 125.661 326.635 124.703 327.312  c
123.744 327.989 122.817 328.328 121.921 328.328  c
120.151 328.328 118.677 327.286 117.500 325.203  c
116.510 323.442 116.015 321.322 116.015 318.843  c
h
118.687 319.187 m
118.687 321.739 119.005 323.817 119.640 325.421  c
120.161 326.786 120.932 327.468 121.953 327.468  c
122.453 327.468 122.966 327.247 123.492 326.804  c
124.018 326.362 124.416 325.619 124.687 324.578  c
125.114 323.015 125.328 320.807 125.328 317.953  c
125.328 315.838 125.109 314.072 124.671 312.656  c
124.338 311.614 123.911 310.875 123.390 310.437  c
123.015 310.135 122.567 309.984 122.046 309.984  c
121.421 309.984 120.869 310.260 120.390 310.812  c
119.734 311.572 119.286 312.763 119.046 314.382  c
118.807 316.002 118.687 317.604 118.687 319.187  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
289.248 284.000 m
289.248 292.520 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
290.281 311.281 m
294.796 309.078 l
295.250 309.078 l
295.250 324.734 l
295.250 325.776 295.291 326.424 295.375 326.679  c
295.458 326.934 295.638 327.130 295.914 327.265  c
296.190 327.401 296.744 327.479 297.578 327.500  c
297.578 328.000 l
290.609 328.000 l
290.609 327.500 l
291.484 327.479 292.049 327.401 292.304 327.265  c
292.559 327.130 292.737 326.953 292.835 326.734  c
292.934 326.515 292.984 325.849 292.984 324.734  c
292.984 314.718 l
292.984 313.375 292.942 312.510 292.859 312.125  c
292.786 311.833 292.666 311.619 292.500 311.484  c
292.333 311.349 292.130 311.281 291.890 311.281  c
291.557 311.281 291.088 311.421 290.484 311.703  c
290.281 311.281 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
461.496 284.000 m
461.496 292.520 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
471.843 324.437 m
470.546 328.000 l
459.609 328.000 l
459.609 327.500 l
462.817 324.562 465.078 322.164 466.390 320.304  c
467.703 318.445 468.359 316.744 468.359 315.203  c
468.359 314.026 468.000 313.059 467.281 312.304  c
466.562 311.549 465.703 311.171 464.703 311.171  c
463.786 311.171 462.966 311.437 462.242 311.968  c
461.518 312.500 460.984 313.281 460.640 314.312  c
460.140 314.312 l
460.369 312.625 460.955 311.330 461.898 310.429  c
462.841 309.528 464.015 309.078 465.421 309.078  c
466.932 309.078 468.190 309.559 469.195 310.523  c
470.200 311.487 470.703 312.625 470.703 313.937  c
470.703 314.885 470.484 315.828 470.046 316.765  c
469.369 318.234 468.276 319.796 466.765 321.453  c
464.494 323.932 463.078 325.427 462.515 325.937  c
467.359 325.937 l
468.338 325.937 469.026 325.901 469.421 325.828  c
469.817 325.755 470.177 325.606 470.500 325.382  c
470.822 325.158 471.099 324.843 471.328 324.437  c
471.843 324.437 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
633.744 284.000 m
633.744 292.520 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
632.421 312.984 m
632.953 311.734 633.622 310.770 634.429 310.093  c
635.237 309.416 636.239 309.078 637.437 309.078  c
638.927 309.078 640.067 309.562 640.859 310.531  c
641.463 311.250 641.765 312.020 641.765 312.843  c
641.765 314.187 640.916 315.578 639.218 317.015  c
640.354 317.463 641.213 318.101 641.796 318.929  c
642.380 319.757 642.671 320.734 642.671 321.859  c
642.671 323.463 642.161 324.854 641.140 326.031  c
639.817 327.562 637.890 328.328 635.359 328.328  c
634.109 328.328 633.260 328.171 632.812 327.859  c
632.364 327.546 632.140 327.213 632.140 326.859  c
632.140 326.599 632.247 326.367 632.460 326.164  c
632.674 325.960 632.932 325.859 633.234 325.859  c
633.463 325.859 633.692 325.895 633.921 325.968  c
634.078 326.020 634.429 326.190 634.976 326.476  c
635.523 326.763 635.901 326.932 636.109 326.984  c
636.453 327.088 636.812 327.140 637.187 327.140  c
638.125 327.140 638.937 326.781 639.625 326.062  c
640.312 325.343 640.656 324.489 640.656 323.500  c
640.656 322.781 640.494 322.078 640.171 321.390  c
639.932 320.880 639.671 320.494 639.390 320.234  c
639.005 319.869 638.468 319.539 637.781 319.242  c
637.093 318.945 636.395 318.796 635.687 318.796  c
635.250 318.796 l
635.250 318.390 l
635.968 318.296 636.690 318.036 637.414 317.609  c
638.138 317.182 638.664 316.666 638.992 316.062  c
639.320 315.458 639.484 314.796 639.484 314.078  c
639.484 313.140 639.192 312.382 638.609 311.804  c
638.026 311.226 637.296 310.937 636.421 310.937  c
635.005 310.937 633.822 311.692 632.875 313.203  c
632.421 312.984 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
805.992 284.000 m
805.992 292.520 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
816.031 321.156 m
816.031 323.109 l
813.546 323.109 l
813.546 328.000 l
811.281 328.000 l
811.281 323.109 l
803.437 323.109 l
803.437 321.359 l
812.031 309.078 l
813.546 309.078 l
813.546 321.156 l
816.031 321.156 l
h
811.281 321.156 m
811.281 311.968 l
804.781 321.156 l
811.281 321.156 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
1.00000 w
2 J
0 j
q
2.00000 w
0 J
1 j
newpath
117.000 284.000 m
117.000 6.00711 l
S
Q
2.00000 w
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
0 106 44 79 rc
newpath
16.0468 130.421 m
16.0468 129.286 15.8125 128.239 15.3437 127.281  c
14.8750 126.322 14.0625 125.364 12.9062 124.406  c
12.0625 124.406 l
11.4895 124.406 10.9270 124.513 10.3750 124.726  c
9.82291 124.940 9.33854 125.255 8.92187 125.671  c
8.58854 126.005 8.30989 126.471 8.08593 127.070  c
7.86197 127.669 7.75000 128.333 7.75000 129.062  c
7.75000 130.062 7.92708 131.015 8.28125 131.921  c
8.63541 132.828 9.15104 133.619 9.82812 134.296  c
10.0885 134.557 10.4375 134.817 10.8750 135.078  c
11.3125 135.338 11.7760 135.468 12.2656 135.468  c
13.0989 135.468 13.7578 135.281 14.2421 134.906  c
14.7265 134.531 15.1093 134.067 15.3906 133.515  c
15.6197 133.067 15.7864 132.599 15.8906 132.109  c
15.9947 131.619 16.0468 131.057 16.0468 130.421  c
h
14.3906 124.406 m
14.3906 124.468 l
14.7447 124.572 15.1224 124.770 15.5234 125.062  c
15.9244 125.354 16.3125 125.682 16.6875 126.046  c
17.0625 126.411 17.4036 126.794 17.7109 127.195  c
18.0182 127.596 18.2552 127.963 18.4218 128.296  c
18.6093 128.671 18.7343 129.031 18.7968 129.375  c
18.8593 129.718 18.8906 130.067 18.8906 130.421  c
18.8906 130.963 18.8125 131.502 18.6562 132.039  c
18.5000 132.575 18.2734 133.080 17.9765 133.554  c
17.6796 134.028 17.3099 134.466 16.8671 134.867  c
16.4244 135.268 15.9322 135.609 15.3906 135.890  c
15.1302 136.015 14.8411 136.122 14.5234 136.210  c
14.2057 136.299 13.8854 136.369 13.5625 136.421  c
13.2395 136.474 12.9218 136.515 12.6093 136.546  c
12.2968 136.578 12.0312 136.593 11.8125 136.593  c
10.9687 136.593 10.1640 136.416 9.39843 136.062  c
8.63281 135.708 7.97916 135.260 7.43750 134.718  c
6.54166 133.822 5.88541 132.856 5.46875 131.820  c
5.05208 130.783 4.84375 129.739 4.84375 128.687  c
4.84375 127.885 5.01562 127.112 5.35937 126.367  c
5.70312 125.622 6.11979 125.005 6.60937 124.515  c
7.01562 124.109 7.48437 123.752 8.01562 123.445  c
8.54687 123.138 9.10677 122.877 9.69531 122.664  c
10.2838 122.450 10.8776 122.286 11.4765 122.171  c
12.0755 122.057 12.6354 122.000 13.1562 122.000  c
20.4687 122.000 l
20.4687 124.406 l
14.3906 124.406 l
h
f
newpath
26.1562 158.718 m
26.2604 159.312 26.3541 159.880 26.4375 160.421  c
26.5208 160.963 26.5625 161.520 26.5625 162.093  c
26.5625 162.531 26.5260 162.927 26.4531 163.281  c
26.3802 163.635 26.2812 163.937 26.1562 164.187  c
26.0312 164.447 25.8880 164.640 25.7265 164.765  c
25.5651 164.890 25.3489 164.953 25.0781 164.953  c
24.7031 164.953 24.4192 164.802 24.2265 164.500  c
24.0338 164.197 23.9375 163.833 23.9375 163.406  c
23.9375 163.031 23.9843 162.627 24.0781 162.195  c
24.1718 161.763 24.2890 161.333 24.4296 160.906  c
24.5703 160.479 24.7135 160.070 24.8593 159.679  c
25.0052 159.289 25.1406 158.958 25.2656 158.687  c
25.1718 157.947 25.0625 157.234 24.9375 156.546  c
24.8125 155.859 24.6744 155.213 24.5234 154.609  c
24.3724 154.005 24.2109 153.458 24.0390 152.968  c
23.8671 152.479 23.6927 152.057 23.5156 151.703  c
23.3593 151.369 23.1406 151.125 22.8593 150.968  c
22.5781 150.812 22.3229 150.734 22.0937 150.734  c
21.7291 150.734 21.3906 150.890 21.0781 151.203  c
20.8385 151.432 20.6822 151.690 20.6093 151.976  c
20.5364 152.263 20.4947 152.614 20.4843 153.031  c
20.1093 153.031 l
20.1093 152.437 l
20.1093 151.864 20.1640 151.364 20.2734 150.937  c
20.3828 150.510 20.4895 150.203 20.5937 150.015  c
20.7604 149.671 20.9921 149.419 21.2890 149.257  c
21.5859 149.096 21.9270 149.015 22.3125 149.015  c
22.7604 149.015 23.1328 149.114 23.4296 149.312  c
23.7265 149.510 23.9895 149.843 24.2187 150.312  c
24.4270 150.739 24.5911 151.169 24.7109 151.601  c
24.8307 152.033 24.9635 152.583 25.1093 153.250  c
25.2239 153.760 25.3515 154.341 25.4921 154.992  c
25.6328 155.643 25.7447 156.270 25.8281 156.875  c
25.8750 156.875 l
28.3593 149.125 l
30.6406 149.125 l
26.1562 158.718 l
h
f
newpath
30.1250 168.203 m
30.5312 167.224 31.0520 166.466 31.6875 165.929  c
32.3229 165.393 33.1145 165.125 34.0625 165.125  c
35.2291 165.125 36.1250 165.505 36.7500 166.265  c
37.2187 166.838 37.4531 167.447 37.4531 168.093  c
37.4531 169.145 36.7864 170.239 35.4531 171.375  c
36.3489 171.729 37.0260 172.231 37.4843 172.882  c
37.9427 173.533 38.1718 174.296 38.1718 175.171  c
38.1718 176.432 37.7708 177.526 36.9687 178.453  c
35.9270 179.661 34.4114 180.265 32.4218 180.265  c
31.4427 180.265 30.7760 180.143 30.4218 179.898  c
30.0677 179.653 29.8906 179.390 29.8906 179.109  c
29.8906 178.901 29.9739 178.718 30.1406 178.562  c
30.3072 178.406 30.5104 178.328 30.7500 178.328  c
30.9270 178.328 31.1093 178.354 31.2968 178.406  c
31.4218 178.447 31.6979 178.580 32.1250 178.804  c
32.5520 179.028 32.8489 179.161 33.0156 179.203  c
33.2864 179.286 33.5677 179.328 33.8593 179.328  c
34.5989 179.328 35.2369 179.044 35.7734 178.476  c
36.3099 177.908 36.5781 177.239 36.5781 176.468  c
36.5781 175.895 36.4531 175.343 36.2031 174.812  c
36.0156 174.406 35.8125 174.099 35.5937 173.890  c
35.2916 173.609 34.8697 173.351 34.3281 173.117  c
33.7864 172.882 33.2395 172.765 32.6875 172.765  c
32.3437 172.765 l
32.3437 172.453 l
32.9062 172.380 33.4713 172.174 34.0390 171.835  c
34.6067 171.497 35.0208 171.091 35.2812 170.617  c
35.5416 170.143 35.6718 169.625 35.6718 169.062  c
35.6718 168.322 35.4401 167.726 34.9765 167.273  c
34.5130 166.820 33.9375 166.593 33.2500 166.593  c
32.1458 166.593 31.2187 167.187 30.4687 168.375  c
30.1250 168.203 l
h
f
Q
cliprestore
newpath
0 0 m
0 390.000 l
814.000 390.000 l
814.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
newpath
117.000 284.000 m
108.480 284.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
95.0156 290.843 m
95.0156 288.729 95.3333 286.908 95.9687 285.382  c
96.6041 283.856 97.4531 282.718 98.5156 281.968  c
99.3385 281.375 100.187 281.078 101.062 281.078  c
102.479 281.078 103.755 281.802 104.890 283.250  c
106.296 285.041 107.000 287.474 107.000 290.546  c
107.000 292.703 106.690 294.533 106.070 296.039  c
105.450 297.544 104.661 298.635 103.703 299.312  c
102.744 299.989 101.817 300.328 100.921 300.328  c
99.1510 300.328 97.6770 299.286 96.5000 297.203  c
95.5104 295.442 95.0156 293.322 95.0156 290.843  c
h
97.6875 291.187 m
97.6875 293.739 98.0052 295.817 98.6406 297.421  c
99.1614 298.786 99.9322 299.468 100.953 299.468  c
101.453 299.468 101.966 299.247 102.492 298.804  c
103.018 298.362 103.416 297.619 103.687 296.578  c
104.114 295.015 104.328 292.807 104.328 289.953  c
104.328 287.838 104.109 286.072 103.671 284.656  c
103.338 283.614 102.911 282.875 102.390 282.437  c
102.015 282.135 101.567 281.984 101.046 281.984  c
100.421 281.984 99.8697 282.260 99.3906 282.812  c
98.7343 283.572 98.2864 284.763 98.0468 286.382  c
97.8072 288.002 97.6875 289.604 97.6875 291.187  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
117.000 208.637 m
108.480 208.637 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
60.0156 214.843 m
60.0156 212.729 60.3333 210.908 60.9687 209.382  c
61.6041 207.856 62.4531 206.718 63.5156 205.968  c
64.3385 205.375 65.1875 205.078 66.0625 205.078  c
67.4791 205.078 68.7552 205.802 69.8906 207.250  c
71.2968 209.041 72.0000 211.474 72.0000 214.546  c
72.0000 216.703 71.6901 218.533 71.0703 220.039  c
70.4505 221.544 69.6614 222.635 68.7031 223.312  c
67.7447 223.989 66.8177 224.328 65.9218 224.328  c
64.1510 224.328 62.6770 223.286 61.5000 221.203  c
60.5104 219.442 60.0156 217.322 60.0156 214.843  c
h
62.6875 215.187 m
62.6875 217.739 63.0052 219.817 63.6406 221.421  c
64.1614 222.786 64.9322 223.468 65.9531 223.468  c
66.4531 223.468 66.9661 223.247 67.4921 222.804  c
68.0182 222.362 68.4166 221.619 68.6875 220.578  c
69.1145 219.015 69.3281 216.807 69.3281 213.953  c
69.3281 211.838 69.1093 210.072 68.6718 208.656  c
68.3385 207.614 67.9114 206.875 67.3906 206.437  c
67.0156 206.135 66.5677 205.984 66.0468 205.984  c
65.4218 205.984 64.8697 206.260 64.3906 206.812  c
63.7343 207.572 63.2864 208.763 63.0468 210.382  c
62.8072 212.002 62.6875 213.604 62.6875 215.187  c
h
76.5000 221.343 m
76.9270 221.343 77.2864 221.492 77.5781 221.789  c
77.8697 222.085 78.0156 222.442 78.0156 222.859  c
78.0156 223.286 77.8671 223.648 77.5703 223.945  c
77.2734 224.242 76.9166 224.390 76.5000 224.390  c
76.0833 224.390 75.7265 224.242 75.4296 223.945  c
75.1328 223.648 74.9843 223.286 74.9843 222.859  c
74.9843 222.432 75.1328 222.072 75.4296 221.781  c
75.7265 221.489 76.0833 221.343 76.5000 221.343  c
h
81.0156 214.843 m
81.0156 212.729 81.3333 210.908 81.9687 209.382  c
82.6041 207.856 83.4531 206.718 84.5156 205.968  c
85.3385 205.375 86.1875 205.078 87.0625 205.078  c
88.4791 205.078 89.7552 205.802 90.8906 207.250  c
92.2968 209.041 93.0000 211.474 93.0000 214.546  c
93.0000 216.703 92.6901 218.533 92.0703 220.039  c
91.4505 221.544 90.6614 222.635 89.7031 223.312  c
88.7447 223.989 87.8177 224.328 86.9218 224.328  c
85.1510 224.328 83.6770 223.286 82.5000 221.203  c
81.5104 219.442 81.0156 217.322 81.0156 214.843  c
h
83.6875 215.187 m
83.6875 217.739 84.0052 219.817 84.6406 221.421  c
85.1614 222.786 85.9322 223.468 86.9531 223.468  c
87.4531 223.468 87.9661 223.247 88.4921 222.804  c
89.0182 222.362 89.4166 221.619 89.6875 220.578  c
90.1145 219.015 90.3281 216.807 90.3281 213.953  c
90.3281 211.838 90.1093 210.072 89.6718 208.656  c
89.3385 207.614 88.9114 206.875 88.3906 206.437  c
88.0156 206.135 87.5677 205.984 87.0468 205.984  c
86.4218 205.984 85.8697 206.260 85.3906 206.812  c
84.7343 207.572 84.2864 208.763 84.0468 210.382  c
83.8072 212.002 83.6875 213.604 83.6875 215.187  c
h
106.843 220.437 m
105.546 224.000 l
94.6093 224.000 l
94.6093 223.500 l
97.8177 220.562 100.078 218.164 101.390 216.304  c
102.703 214.445 103.359 212.744 103.359 211.203  c
103.359 210.026 103.000 209.059 102.281 208.304  c
101.562 207.549 100.703 207.171 99.7031 207.171  c
98.7864 207.171 97.9661 207.437 97.2421 207.968  c
96.5182 208.500 95.9843 209.281 95.6406 210.312  c
95.1406 210.312 l
95.3697 208.625 95.9557 207.330 96.8984 206.429  c
97.8411 205.528 99.0156 205.078 100.421 205.078  c
101.932 205.078 103.190 205.559 104.195 206.523  c
105.200 207.487 105.703 208.625 105.703 209.937  c
105.703 210.885 105.484 211.828 105.046 212.765  c
104.369 214.234 103.276 215.796 101.765 217.453  c
99.4947 219.932 98.0781 221.427 97.5156 221.937  c
102.359 221.937 l
103.338 221.937 104.026 221.901 104.421 221.828  c
104.817 221.755 105.177 221.606 105.500 221.382  c
105.822 221.158 106.099 220.843 106.328 220.437  c
106.843 220.437 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
117.000 133.274 m
108.480 133.274 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
60.0156 139.843 m
60.0156 137.729 60.3333 135.908 60.9687 134.382  c
61.6041 132.856 62.4531 131.718 63.5156 130.968  c
64.3385 130.375 65.1875 130.078 66.0625 130.078  c
67.4791 130.078 68.7552 130.802 69.8906 132.250  c
71.2968 134.041 72.0000 136.474 72.0000 139.546  c
72.0000 141.703 71.6901 143.533 71.0703 145.039  c
70.4505 146.544 69.6614 147.635 68.7031 148.312  c
67.7447 148.989 66.8177 149.328 65.9218 149.328  c
64.1510 149.328 62.6770 148.286 61.5000 146.203  c
60.5104 144.442 60.0156 142.322 60.0156 139.843  c
h
62.6875 140.187 m
62.6875 142.739 63.0052 144.817 63.6406 146.421  c
64.1614 147.786 64.9322 148.468 65.9531 148.468  c
66.4531 148.468 66.9661 148.247 67.4921 147.804  c
68.0182 147.362 68.4166 146.619 68.6875 145.578  c
69.1145 144.015 69.3281 141.807 69.3281 138.953  c
69.3281 136.838 69.1093 135.072 68.6718 133.656  c
68.3385 132.614 67.9114 131.875 67.3906 131.437  c
67.0156 131.135 66.5677 130.984 66.0468 130.984  c
65.4218 130.984 64.8697 131.260 64.3906 131.812  c
63.7343 132.572 63.2864 133.763 63.0468 135.382  c
62.8072 137.002 62.6875 138.604 62.6875 140.187  c
h
76.5000 146.343 m
76.9270 146.343 77.2864 146.492 77.5781 146.789  c
77.8697 147.085 78.0156 147.442 78.0156 147.859  c
78.0156 148.286 77.8671 148.648 77.5703 148.945  c
77.2734 149.242 76.9166 149.390 76.5000 149.390  c
76.0833 149.390 75.7265 149.242 75.4296 148.945  c
75.1328 148.648 74.9843 148.286 74.9843 147.859  c
74.9843 147.432 75.1328 147.072 75.4296 146.781  c
75.7265 146.489 76.0833 146.343 76.5000 146.343  c
h
81.0156 139.843 m
81.0156 137.729 81.3333 135.908 81.9687 134.382  c
82.6041 132.856 83.4531 131.718 84.5156 130.968  c
85.3385 130.375 86.1875 130.078 87.0625 130.078  c
88.4791 130.078 89.7552 130.802 90.8906 132.250  c
92.2968 134.041 93.0000 136.474 93.0000 139.546  c
93.0000 141.703 92.6901 143.533 92.0703 145.039  c
91.4505 146.544 90.6614 147.635 89.7031 148.312  c
88.7447 148.989 87.8177 149.328 86.9218 149.328  c
85.1510 149.328 83.6770 148.286 82.5000 146.203  c
81.5104 144.442 81.0156 142.322 81.0156 139.843  c
h
83.6875 140.187 m
83.6875 142.739 84.0052 144.817 84.6406 146.421  c
85.1614 147.786 85.9322 148.468 86.9531 148.468  c
87.4531 148.468 87.9661 148.247 88.4921 147.804  c
89.0182 147.362 89.4166 146.619 89.6875 145.578  c
90.1145 144.015 90.3281 141.807 90.3281 138.953  c
90.3281 136.838 90.1093 135.072 89.6718 133.656  c
89.3385 132.614 88.9114 131.875 88.3906 131.437  c
88.0156 131.135 87.5677 130.984 87.0468 130.984  c
86.4218 130.984 85.8697 131.260 85.3906 131.812  c
84.7343 132.572 84.2864 133.763 84.0468 135.382  c
83.8072 137.002 83.6875 138.604 83.6875 140.187  c
h
107.031 142.156 m
107.031 144.109 l
104.546 144.109 l
104.546 149.000 l
102.281 149.000 l
102.281 144.109 l
94.4375 144.109 l
94.4375 142.359 l
103.031 130.078 l
104.546 130.078 l
104.546 142.156 l
107.031 142.156 l
h
102.281 142.156 m
102.281 132.968 l
95.7812 142.156 l
102.281 142.156 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
117.000 57.9111 m
108.480 57.9111 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
60.0156 63.8437 m
60.0156 61.7291 60.3333 59.9088 60.9687 58.3828  c
61.6041 56.8567 62.4531 55.7187 63.5156 54.9687  c
64.3385 54.3750 65.1875 54.0781 66.0625 54.0781  c
67.4791 54.0781 68.7552 54.8020 69.8906 56.2500  c
71.2968 58.0416 72.0000 60.4739 72.0000 63.5468  c
72.0000 65.7031 71.6901 67.5338 71.0703 69.0390  c
70.4505 70.5442 69.6614 71.6354 68.7031 72.3125  c
67.7447 72.9895 66.8177 73.3281 65.9218 73.3281  c
64.1510 73.3281 62.6770 72.2864 61.5000 70.2031  c
60.5104 68.4427 60.0156 66.3229 60.0156 63.8437  c
h
62.6875 64.1875 m
62.6875 66.7395 63.0052 68.8177 63.6406 70.4218  c
64.1614 71.7864 64.9322 72.4687 65.9531 72.4687  c
66.4531 72.4687 66.9661 72.2474 67.4921 71.8046  c
68.0182 71.3619 68.4166 70.6197 68.6875 69.5781  c
69.1145 68.0156 69.3281 65.8072 69.3281 62.9531  c
69.3281 60.8385 69.1093 59.0729 68.6718 57.6562  c
68.3385 56.6145 67.9114 55.8750 67.3906 55.4375  c
67.0156 55.1354 66.5677 54.9843 66.0468 54.9843  c
65.4218 54.9843 64.8697 55.2604 64.3906 55.8125  c
63.7343 56.5729 63.2864 57.7630 63.0468 59.3828  c
62.8072 61.0026 62.6875 62.6041 62.6875 64.1875  c
h
76.5000 70.3437 m
76.9270 70.3437 77.2864 70.4921 77.5781 70.7890  c
77.8697 71.0859 78.0156 71.4427 78.0156 71.8593  c
78.0156 72.2864 77.8671 72.6484 77.5703 72.9453  c
77.2734 73.2421 76.9166 73.3906 76.5000 73.3906  c
76.0833 73.3906 75.7265 73.2421 75.4296 72.9453  c
75.1328 72.6484 74.9843 72.2864 74.9843 71.8593  c
74.9843 71.4322 75.1328 71.0729 75.4296 70.7812  c
75.7265 70.4895 76.0833 70.3437 76.5000 70.3437  c
h
81.0156 63.8437 m
81.0156 61.7291 81.3333 59.9088 81.9687 58.3828  c
82.6041 56.8567 83.4531 55.7187 84.5156 54.9687  c
85.3385 54.3750 86.1875 54.0781 87.0625 54.0781  c
88.4791 54.0781 89.7552 54.8020 90.8906 56.2500  c
92.2968 58.0416 93.0000 60.4739 93.0000 63.5468  c
93.0000 65.7031 92.6901 67.5338 92.0703 69.0390  c
91.4505 70.5442 90.6614 71.6354 89.7031 72.3125  c
88.7447 72.9895 87.8177 73.3281 86.9218 73.3281  c
85.1510 73.3281 83.6770 72.2864 82.5000 70.2031  c
81.5104 68.4427 81.0156 66.3229 81.0156 63.8437  c
h
83.6875 64.1875 m
83.6875 66.7395 84.0052 68.8177 84.6406 70.4218  c
85.1614 71.7864 85.9322 72.4687 86.9531 72.4687  c
87.4531 72.4687 87.9661 72.2474 88.4921 71.8046  c
89.0182 71.3619 89.4166 70.6197 89.6875 69.5781  c
90.1145 68.0156 90.3281 65.8072 90.3281 62.9531  c
90.3281 60.8385 90.1093 59.0729 89.6718 57.6562  c
89.3385 56.6145 88.9114 55.8750 88.3906 55.4375  c
88.0156 55.1354 87.5677 54.9843 87.0468 54.9843  c
86.4218 54.9843 85.8697 55.2604 85.3906 55.8125  c
84.7343 56.5729 84.2864 57.7630 84.0468 59.3828  c
83.8072 61.0026 83.6875 62.6041 83.6875 64.1875  c
h
106.546 54.0781 m
106.546 54.5781 l
105.349 54.7031 104.369 54.9453 103.609 55.3046  c
102.849 55.6640 102.096 56.2135 101.351 56.9531  c
100.606 57.6927 99.9895 58.5156 99.5000 59.4218  c
99.0104 60.3281 98.6041 61.4062 98.2812 62.6562  c
99.5937 61.7500 100.911 61.2968 102.234 61.2968  c
103.494 61.2968 104.591 61.8072 105.523 62.8281  c
106.455 63.8489 106.921 65.1614 106.921 66.7656  c
106.921 68.3177 106.453 69.7291 105.515 71.0000  c
104.380 72.5520 102.885 73.3281 101.031 73.3281  c
99.7604 73.3281 98.6822 72.9062 97.7968 72.0625  c
96.0677 70.4375 95.2031 68.3229 95.2031 65.7187  c
95.2031 64.0625 95.5364 62.4869 96.2031 60.9921  c
96.8697 59.4974 97.8203 58.1718 99.0546 57.0156  c
100.289 55.8593 101.471 55.0807 102.601 54.6796  c
103.731 54.2786 104.786 54.0781 105.765 54.0781  c
106.546 54.0781 l
h
98.0468 63.6406 m
97.8802 64.8802 97.7968 65.8750 97.7968 66.6250  c
97.7968 67.5000 97.9583 68.4505 98.2812 69.4765  c
98.6041 70.5026 99.0885 71.3177 99.7343 71.9218  c
100.192 72.3489 100.755 72.5625 101.421 72.5625  c
102.213 72.5625 102.921 72.1875 103.546 71.4375  c
104.171 70.6875 104.484 69.6197 104.484 68.2343  c
104.484 66.6822 104.174 65.3359 103.554 64.1953  c
102.934 63.0546 102.057 62.4843 100.921 62.4843  c
100.578 62.4843 100.205 62.5572 99.8046 62.7031  c
99.4036 62.8489 98.8177 63.1614 98.0468 63.6406  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
1.00000 w
2 J
0 j
Q
Q
cliprestore
0 0 824 400 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
1.00000 w
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
