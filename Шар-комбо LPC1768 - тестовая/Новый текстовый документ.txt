#include "mbed.h"
#define NOM 8  //number of receiving bytes by UART

void Rx_Interrupt(void);
void time(void);
void obrabotka_bufera(void);
void str (float);
void motor1(int, float);
void motor2(int, float);
void IR_Enc_A1(void);
void IR_Enc_B1(void);
void IR_Enc_A2(void);
void IR_Enc_B2(void);
void sinchr(int , int , int, int);
void reset_pid(void);
void razgon(int, int,int, int);
///////////////////////////////////////////////////////////////////////////////////////////////////
// for UART's bufer 


char buffer[NOM];   //bufer for receiving by UART

char flag_uart=0;  //flag for UART, if 1 information get
int timeout=0;        //timeout for UART
int timeout_set=3000;                         // setted value of timeout
int count_bufer=0; //counter of elements of UART's buffer
volatile uint32_t n1=0, n2=0;
char metka=0;


///////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////
// for motor
DigitalOut motor_dir1(p11);
DigitalOut motor_dir11(p12);
PwmOut motor_speed1(p21);

DigitalOut motor_dir2(p15);
DigitalOut motor_dir22(p16);
PwmOut motor_speed2(p22);

InterruptIn Enc_A1(p29);
InterruptIn Enc_B1(p30);

InterruptIn Enc_A2(p17);
InterruptIn Enc_B2(p18);

int flag_move=0;
///////////////////////////////////////////////////////////////////////////////////////////////////
// for LED
DigitalOut myled1(LED1);
PwmOut myled3(LED3);
DigitalOut myled4(LED4);

PwmOut myled2(LED2);

Serial uart(p9, p10);  // tx, rx

Ticker tim;

// For encoders
volatile int zad_pulse1=0,zad_pulse2=0;       //number of pulse encoder in a 0,01 second
int per_chislo=10;
int  pulse_enc=48, dt=20;                             // Constants
int omega=0;

int dt_r=10;

/////////////////////////////////////////////////////////////////////////////////
// for PID
volatile float integral1=0,integral2=0;
volatile int16_t e01=0, e02=0;    //old errors
volatile int16_t e1,e2;                   //new errors

volatile float u=0;

void str (float zn)
{ 
    int mas_zn[6];
    int i,minus=0,ZN;
    
    if(zn<0)
    {
      minus=1;
      zn*=-1;
    }
    
    ZN=(int)zn;
      
    for (i=5;i>=0;i--)
    {
      mas_zn[i]=ZN%10;
      ZN/=10;
    }
    
    if (minus==1)
    {
      mas_zn[0]=-3;
    }
    
    for (i=0;i<=5;i++)
    {
      uart.putc(mas_zn[i]+48);
    }
    
    uart.printf("\r\n");
}
///////////////////////////////////////////////////////////////////////////////////////////////////
void Rx_Interrupt()
{
    int i=0;
    
    timeout=0;

    if(flag_uart==1)            
    {
        return;             //if buffer is at the work, then exit
    }

        
    //write receiving data to the buffer
    buffer[count_bufer] = uart.getc();

        
    //maximum is NOM bytes, if counter equal NOM, we got all bytes
    count_bufer++;
    if(count_bufer==NOM)
    {
        count_bufer=0;
        flag_uart=1;
                       
        obrabotka_bufera();
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////
void time()
{

    static int i1=0, i2=0;
            
    i1++;
    i2++;

    if(i1==500)
    {
      myled1 = !myled1;
      i1=0;
    }
       
    
    
    if(i2==dt)
    {
        if(flag_move==1 )
        {
					if(n1!=0 && n2!=0)
					{
            sinchr(n1,zad_pulse1, n2,zad_pulse2);
            //sinchr(n2,zad_pulse2, 2);
            
            
            n1=0;
            n2=0;
					}
            
        }

        i2=0;
    }
    
    //if we got something by UART4, we are waiting for timeout...
    //if(count_bufer != 0)
//    {
//        timeout++;
//        //if timeout is finished, we will get nothing 
//        if(timeout>timeout_set) 
//        {
//            count_bufer=0;
//            flag_uart=1;
//            timeout=0;
//            
//            obrabotka_bufera();
//        }
//    }
}

////////////////////////////////////////////////////////////////////////// 
// Synchronization
//////////////////////////////////////////////////////////////////////////
void sinchr(int cnt1, int ust_znach1, int cnt2, int ust_znach2)
{

    float temp;
    
    
    
    
	e1=ust_znach1-cnt1;
	
        //e1=e;

        //integral1+=(e1+e01)/2;

        u=6*e1 + 5*(e1-e01);//+ 0.01*integral1;
    
        temp=(1-motor_speed1)*10000;
        temp+=(int)u;
    
        if(temp>10000)
        {
            temp=10000;
        }
        if(temp<=0)
        {
            temp=0;
        }
    
        motor_speed1=1-(temp/10000);
    
        e01=e1;
        
    
        e2=ust_znach2-cnt2;
        //e2=e;
        //integral2+=(e2+e02)/2;

        u=6*e2 + 5*(e2-e02);//+ 0.01*integral2;
    
        temp=(1-motor_speed2)*10000;
        temp+=(int)u;
    
        if(temp>10000)
        {
            temp=10000;
        }
        if(temp<=0)
        {
            temp=0;                  
        }
    
        
        motor_speed2=1-(temp/10000);
    
        e02=e2;
        
       
    
}

void reset_pid()
{
    integral1=integral2=0;
    e1=e2=e01=e02=0;
    n1=0;
    n2=0;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
void IR_Enc_A1()
{
    char A, B;
    
    A=Enc_A1;
    B=Enc_B1;

       if ((A==1)&&(B==0)) {n1++;}
       if ((A==0)&&(B==1)) {n1++;}

       if ((A==1)&&(B==1)) {n1++;}
       if ((A==0)&&(B==0)) {n1++;}
       

       
}

void IR_Enc_B1()
{
    char A, B;
    
    A=Enc_A1;
    B=Enc_B1;

    if ((B==1)&&(A==1)) {n1++;}
    if ((B==0)&&(A==0)) {n1++;}
    if ((B==1)&&(A==0)) {n1++;}
    if ((B==0)&&(A==1)) {n1++;}


}

void IR_Enc_A2()
{
    char A, B;
    
    A=Enc_A2;
    B=Enc_B2;

       if ((A==1)&&(B==0)) {n2++;}
       if ((A==0)&&(B==1)) {n2++;}

       if ((A==1)&&(B==1)) {n2++;}
       if ((A==0)&&(B==0)) {n2++;}
       

       
}

void IR_Enc_B2()
{
    char A, B;
    
    A=Enc_A2;
    B=Enc_B2;

    if ((B==1)&&(A==1)) {n2++;}
    if ((B==0)&&(A==0)) {n2++;}
    if ((B==1)&&(A==0)) {n2++;}
    if ((B==0)&&(A==1)) {n2++;}
    

}

///////////////////////////////////////////////////////////////////////////
// analysis of UART's data
//////////////////////////////////////////////////////////////////////////
void obrabotka_bufera(void)
{
    int i=0;
    
    float speed1, speed2;
    int dir1, dir2, omega1, omega2;
    
    if(flag_uart==1)            // if data is got by UART
    {
            if(buffer[0]==125)  // if we received speeds of motors
            {
                
                // wheel 1
                
                dir1=buffer[1];                
                
                omega1=buffer[2]<<8;             // rotational velocity of the 1 wheel, RPM (revolution per minute)
                omega1+=buffer[3];
                speed1=(float)omega1/1000;
                zad_pulse1=(omega1*pulse_enc*per_chislo*dt)/(60*1000);   //calculate number of pulse of encoder for time dt

                //uart.putc((char)zad_pulse1);
                
                // wheel 2
                dir2=buffer[4];                
                omega2=buffer[5]<<8;             // rotational velocity of the 1 wheel, RPM (revolution per minute)
                omega2+=buffer[6];
                speed2=(float)omega2/1000;                                                              
                zad_pulse2=(omega2*pulse_enc*per_chislo*dt)/(60*1000);   //calculate number of pulse of encoder for time dt

                //uart.putc((char)zad_pulse2);   
                          
                if(buffer[7]==1)   //forward
                {
                    motor1(dir1, 0);
                    motor2(dir2, 0);
                    
                    
                    
                    razgon(dir1, omega1, dir2, omega2);
                    
                    motor_speed2=1-speed2;
                    motor_speed1=1-speed1;
                    
                    //uart.putc(buffer[7]);
                    myled4=1;
                    
                    flag_move=1;
                }
                else if(buffer[7]==0)  //stop
                {
                    motor1(0,0);
                    motor2(0,0);
                    //uart.putc(10);
                    myled4=0;
                    
                    flag_move=0;
                    //systick_ms=0;
                    n1=0;
                    n2=0;
                    
                    myled2=1-motor_speed1;
                    myled3=1-motor_speed2;
                    
                    reset_pid();
                }
                
            }
            
            //clear bufer
            for(i=0;i<NOM;i++)
            {
                buffer[i]=0;
            }

            flag_uart=0;    //clear flag
        }
}
///////////////////////////////////////////////////////////////////////////////////////////////////
void razgon(int dir1, int omega1, int dir2, int omega2)
{
    int om_r1=0, om_r2=0;
    int i=0;
    
    
    for(i=0;i<10;i++)
    {
        om_r1+=omega1/10;
        om_r2+=omega2/10;   
        
        //zad_pulse1=(om_r1*pulse_enc*per_chislo*dt)/(60*1000);   //calculate number of pulse of encoder for time dt
        //zad_pulse2=(om_r2*pulse_enc*per_chislo*dt)/(60*1000);   //calculate number of pulse of encoder for time dt
        
        motor1(dir1,(float)om_r1/1000);
        motor2(dir2, (float)om_r2/1000);
        wait(0.1);   
    }

}
///////////////////////////////////////////////////////////////////////////////////////////////////
void motor1(int dir, float speed)
{
    if(dir==1)
    {
        motor_dir1=1;
        motor_dir11=0;  
    }
    else if(dir==2)
    {
        motor_dir1=0;
        motor_dir11=1;  
    }
    else if(dir==0)
    {
        motor_dir1=0;
        motor_dir11=0;  
    }
    
    motor_speed1=1-speed;   
    
    
}

void motor2(int dir, float speed)
{
    if(dir==1)
    {
        motor_dir2=1;
        motor_dir22=0;  
    }
    else if(dir==2)
    {
        motor_dir2=0;
        motor_dir22=1;  
    }
    else if(dir==0)
    {
        motor_dir2=0;
        motor_dir22=0;  
    } 
    motor_speed2=1-speed;   
    
}


///////////////////////////////////////////////////////////////////////////////////////////////////
int main() 
{
    Enc_A1.fall(&IR_Enc_A1);
    //Enc_B1.fall(&IR_Enc_B1);
    
    Enc_A1.rise(&IR_Enc_A1);
    //Enc_B1.rise(&IR_Enc_B1);
    
    Enc_A2.fall(&IR_Enc_A2);
    //Enc_B2.fall(&IR_Enc_B2);
    
    Enc_A2.rise(&IR_Enc_A2);
    //Enc_B2.rise(&IR_Enc_B2);
    
    tim.attach_us(&time, 1000);
    
    uart.baud(9600);
    uart.format(8, Serial::Even, 1);
    uart.attach(&Rx_Interrupt);
    
    uart.putc(1);
    uart.printf("OK ");
    
    motor_speed1.period(0.00014);
    motor_speed2.period(0.00014);
    
    while(1) 
    {
        
        
    }
}
